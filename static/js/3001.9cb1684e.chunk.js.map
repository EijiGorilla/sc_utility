{"version":3,"file":"static/js/3001.9cb1684e.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/dropdown/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/dropdown/dropdown.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/dropdown/dropdown.scss?tag=calcite-dropdown&encapsulation=shadow"],"sourcesContent":["export const SLOTS = {\n  dropdownTrigger: \"trigger\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { focusElement, focusElementInGroup, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultMenuPlacement,\n  disconnectFloatingUI,\n  filterValidFlipPlacements,\n  FlipPlacement,\n  FloatingCSS,\n  FloatingUIComponent,\n  MenuPlacement,\n  OverlayPositioning,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { RequestedItem } from \"../dropdown-group/interfaces\";\nimport { Scale } from \"../interfaces\";\nimport { ItemKeyboardEvent } from \"./interfaces\";\nimport { SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-dropdown-group` elements. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set.\n * @slot trigger - A slot for the element that triggers the `calcite-dropdown`.\n */\n@Component({\n  tag: \"calcite-dropdown\",\n  styleUrl: \"dropdown.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class Dropdown\n  implements InteractiveComponent, LoadableComponent, OpenCloseComponent, FloatingUIComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, displays and positions the component.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n\n    if (this.disabled) {\n      this.open = false;\n      return;\n    }\n\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component will remain open after a selection is made.\n   *\n   * If the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `\"none\"`, the component will always close.\n   *\n   */\n  @Prop({ reflect: true }) closeOnSelectDisabled = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  handleDisabledChange(value: boolean): void {\n    if (!value) {\n      this.open = false;\n    }\n  }\n\n  /**\n   * Defines the available placements that can be used when a flip occurs.\n   */\n  @Prop() flipPlacements: FlipPlacement[];\n\n  @Watch(\"flipPlacements\")\n  flipPlacementsHandler(): void {\n    this.setFilteredPlacements();\n    this.reposition(true);\n  }\n\n  /**\n   * Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller.\n   * Value must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.\n   */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  @Watch(\"maxItems\")\n  maxItemsHandler(): void {\n    this.setMaxScrollerHeight();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the container element.\n   *\n   * @default \"bottom-start\"\n   */\n  @Prop({ reflect: true }) placement: MenuPlacement = defaultMenuPlacement;\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Specifies the component's selected items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItems: HTMLCalciteDropdownItemElement[] = [];\n\n  /**\n   * Specifies the action to open the component from the container element.\n   */\n  @Prop({ reflect: true }) type: \"hover\" | \"click\" = \"click\";\n\n  /**\n   * Specifies the width of the component.\n   */\n  @Prop({ reflect: true }) widthScale: Scale;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  handlePropsChange(): void {\n    this.updateItems();\n    this.updateGroupScale();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n    this.setFilteredPlacements();\n    if (this.open) {\n      this.openHandler();\n      onToggleOpenCloseComponent(this);\n    }\n    connectInteractive(this);\n    this.updateItems();\n    connectFloatingUI(this, this.referenceEl, this.floatingEl);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    connectFloatingUI(this, this.referenceEl, this.floatingEl);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n    this.resizeObserver?.disconnect();\n    disconnectInteractive(this);\n    disconnectFloatingUI(this, this.referenceEl, this.floatingEl);\n  }\n\n  render(): VNode {\n    const { open, guid } = this;\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <div\n            class=\"calcite-trigger-container\"\n            id={`${guid}-menubutton`}\n            onClick={this.openCalciteDropdown}\n            onKeyDown={this.keyDownHandler}\n            ref={this.setReferenceEl}\n          >\n            <slot\n              aria-controls={`${guid}-menu`}\n              aria-expanded={toAriaBoolean(open)}\n              aria-haspopup=\"menu\"\n              name={SLOTS.dropdownTrigger}\n              onSlotchange={this.updateTriggers}\n            />\n          </div>\n          <div\n            aria-hidden={toAriaBoolean(!open)}\n            class=\"calcite-dropdown-wrapper\"\n            ref={this.setFloatingEl}\n          >\n            <div\n              aria-labelledby={`${guid}-menubutton`}\n              class={{\n                [\"calcite-dropdown-content\"]: true,\n                [FloatingCSS.animation]: true,\n                [FloatingCSS.animationActive]: open,\n              }}\n              id={`${guid}-menu`}\n              ref={this.setScrollerAndTransitionEl}\n              role=\"menu\"\n            >\n              <slot onSlotchange={this.updateGroups} />\n            </div>\n          </div>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const { floatingEl, referenceEl, placement, overlayPositioning, filteredFlipPlacements } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl,\n        referenceEl,\n        overlayPositioning,\n        placement,\n        flipPlacements: filteredFlipPlacements,\n        type: \"menu\",\n      },\n      delayed,\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when a `calcite-dropdown-item`'s selection changes. */\n  @Event({ cancelable: false }) calciteDropdownSelect: EventEmitter<void>;\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteDropdownBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteDropdownClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteDropdownBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteDropdownOpen: EventEmitter<void>;\n\n  @Listen(\"click\", { target: \"window\" })\n  closeCalciteDropdownOnClick(event: PointerEvent): void {\n    if (this.disabled || !this.open || event.composedPath().includes(this.el)) {\n      return;\n    }\n\n    this.closeCalciteDropdown(false);\n  }\n\n  @Listen(\"calciteInternalDropdownCloseRequest\")\n  closeCalciteDropdownOnEvent(event: Event): void {\n    this.closeCalciteDropdown();\n    event.stopPropagation();\n  }\n\n  @Listen(\"calciteDropdownOpen\", { target: \"window\" })\n  closeCalciteDropdownOnOpenEvent(event: Event): void {\n    if (event.composedPath().includes(this.el)) {\n      return;\n    }\n\n    this.open = false;\n  }\n\n  @Listen(\"pointerenter\")\n  pointerEnterHandler(): void {\n    if (this.disabled || this.type !== \"hover\") {\n      return;\n    }\n\n    this.openCalciteDropdown();\n  }\n\n  @Listen(\"pointerleave\")\n  pointerLeaveHandler(): void {\n    if (this.disabled || this.type !== \"hover\") {\n      return;\n    }\n\n    this.closeCalciteDropdown();\n  }\n\n  private getTraversableItems(): HTMLCalciteDropdownItemElement[] {\n    return this.items.filter((item) => !item.disabled && !item.hidden);\n  }\n\n  @Listen(\"calciteInternalDropdownItemKeyEvent\")\n  calciteInternalDropdownItemKeyEvent(event: CustomEvent<ItemKeyboardEvent>): void {\n    const { keyboardEvent } = event.detail;\n    const target = keyboardEvent.target as HTMLCalciteDropdownItemElement;\n    const traversableItems = this.getTraversableItems();\n\n    switch (keyboardEvent.key) {\n      case \"Tab\":\n        this.open = false;\n        this.updateTabIndexOfItems(target);\n        break;\n      case \"ArrowDown\":\n        focusElementInGroup(traversableItems, target, \"next\");\n        break;\n      case \"ArrowUp\":\n        focusElementInGroup(traversableItems, target, \"previous\");\n        break;\n      case \"Home\":\n        focusElementInGroup(traversableItems, target, \"first\");\n        break;\n      case \"End\":\n        focusElementInGroup(traversableItems, target, \"last\");\n        break;\n    }\n\n    event.stopPropagation();\n  }\n\n  @Listen(\"calciteInternalDropdownItemSelect\")\n  handleItemSelect(event: CustomEvent<RequestedItem>): void {\n    this.updateSelectedItems();\n    event.stopPropagation();\n    this.calciteDropdownSelect.emit();\n    if (\n      !this.closeOnSelectDisabled ||\n      event.detail.requestedDropdownGroup.selectionMode === \"none\"\n    ) {\n      this.closeCalciteDropdown();\n    }\n    event.stopPropagation();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteDropdownElement;\n\n  filteredFlipPlacements: FlipPlacement[];\n\n  private items: HTMLCalciteDropdownItemElement[] = [];\n\n  private groups: HTMLCalciteDropdownGroupElement[] = [];\n\n  /** trigger elements */\n  private triggers: HTMLElement[];\n\n  floatingEl: HTMLDivElement;\n\n  referenceEl: HTMLDivElement;\n\n  private scrollerEl: HTMLDivElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.updateItems());\n\n  resizeObserver = createObserver(\"resize\", (entries) => this.resizeObserverCallback(entries));\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  guid = `calcite-dropdown-${guid()}`;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  setFilteredPlacements = (): void => {\n    const { el, flipPlacements } = this;\n\n    this.filteredFlipPlacements = flipPlacements\n      ? filterValidFlipPlacements(flipPlacements, el)\n      : null;\n  };\n\n  updateTriggers = (event: Event): void => {\n    this.triggers = (event.target as HTMLSlotElement).assignedElements({\n      flatten: true,\n    }) as HTMLElement[];\n\n    this.reposition(true);\n  };\n\n  updateItems = (): void => {\n    this.items = this.groups\n      .map((group) => Array.from(group?.querySelectorAll(\"calcite-dropdown-item\")))\n      .reduce((previousValue, currentValue) => [...previousValue, ...currentValue], []);\n\n    this.updateSelectedItems();\n\n    this.reposition(true);\n\n    this.items.forEach((item) => (item.scale = this.scale));\n  };\n\n  updateGroups = (event: Event): void => {\n    const groups = (event.target as HTMLSlotElement)\n      .assignedElements({ flatten: true })\n      .filter((el) => el?.matches(\"calcite-dropdown-group\")) as HTMLCalciteDropdownGroupElement[];\n\n    this.groups = groups;\n\n    this.updateItems();\n    this.updateGroupScale();\n  };\n\n  private updateGroupScale(): void {\n    this.groups?.forEach((group) => (group.scale = this.scale));\n  }\n\n  resizeObserverCallback = (entries: ResizeObserverEntry[]): void => {\n    entries.forEach((entry) => {\n      const { target } = entry;\n      if (target === this.referenceEl) {\n        this.setDropdownWidth();\n      } else if (target === this.scrollerEl) {\n        this.setMaxScrollerHeight();\n      }\n    });\n  };\n\n  setDropdownWidth = (): void => {\n    const { referenceEl, scrollerEl } = this;\n    const referenceElWidth = referenceEl?.clientWidth;\n\n    if (!referenceElWidth || !scrollerEl) {\n      return;\n    }\n\n    scrollerEl.style.minWidth = `${referenceElWidth}px`;\n  };\n\n  setMaxScrollerHeight = (): void => {\n    const { scrollerEl } = this;\n    if (!scrollerEl) {\n      return;\n    }\n\n    this.reposition(true);\n    const maxScrollerHeight = this.getMaxScrollerHeight();\n    scrollerEl.style.maxHeight = maxScrollerHeight > 0 ? `${maxScrollerHeight}px` : \"\";\n    this.reposition(true);\n  };\n\n  setScrollerAndTransitionEl = (el: HTMLDivElement): void => {\n    this.resizeObserver.observe(el);\n    this.scrollerEl = el;\n\n    this.transitionEl = el;\n  };\n\n  onBeforeOpen(): void {\n    this.calciteDropdownBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteDropdownOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteDropdownBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteDropdownClose.emit();\n  }\n\n  setReferenceEl = (el: HTMLDivElement): void => {\n    this.referenceEl = el;\n    connectFloatingUI(this, this.referenceEl, this.floatingEl);\n    this.resizeObserver.observe(el);\n  };\n\n  setFloatingEl = (el: HTMLDivElement): void => {\n    this.floatingEl = el;\n    connectFloatingUI(this, this.referenceEl, this.floatingEl);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (!event.composedPath().includes(this.referenceEl)) {\n      return;\n    }\n\n    const { defaultPrevented, key } = event;\n\n    if (defaultPrevented) {\n      return;\n    }\n\n    if (this.open) {\n      if (key === \"Escape\") {\n        this.closeCalciteDropdown();\n        event.preventDefault();\n        return;\n      } else if (event.shiftKey && key === \"Tab\") {\n        this.closeCalciteDropdown();\n        event.preventDefault();\n        return;\n      }\n    }\n\n    if (isActivationKey(key)) {\n      this.openCalciteDropdown();\n      event.preventDefault();\n    } else if (key === \"Escape\") {\n      this.closeCalciteDropdown();\n      event.preventDefault();\n    }\n  };\n\n  private updateSelectedItems(): void {\n    this.selectedItems = this.items.filter((item) => item.selected);\n  }\n\n  private getMaxScrollerHeight(): number {\n    const { maxItems, items } = this;\n    let itemsToProcess = 0;\n    let maxScrollerHeight = 0;\n    let groupHeaderHeight: number;\n\n    this.groups.forEach((group) => {\n      if (maxItems > 0 && itemsToProcess < maxItems) {\n        Array.from(group.children).forEach((item: HTMLCalciteDropdownItemElement, index) => {\n          if (index === 0) {\n            if (isNaN(groupHeaderHeight)) {\n              groupHeaderHeight = item.offsetTop;\n            }\n\n            maxScrollerHeight += groupHeaderHeight;\n          }\n\n          if (itemsToProcess < maxItems) {\n            maxScrollerHeight += item.offsetHeight;\n            itemsToProcess += 1;\n          }\n        });\n      }\n    });\n\n    return items.length > maxItems ? maxScrollerHeight : 0;\n  }\n\n  private closeCalciteDropdown(focusTrigger = true) {\n    this.open = false;\n\n    if (focusTrigger) {\n      focusElement(this.triggers[0]);\n    }\n  }\n\n  private focusOnFirstActiveOrFirstItem = (): void => {\n    this.getFocusableElement(\n      this.getTraversableItems().find((item) => item.selected) || this.items[0],\n    );\n  };\n\n  private getFocusableElement(item: HTMLCalciteDropdownItemElement): void {\n    if (!item) {\n      return;\n    }\n\n    focusElement(item);\n  }\n\n  private toggleOpenEnd = (): void => {\n    this.focusOnFirstActiveOrFirstItem();\n    this.el.removeEventListener(\"calciteDropdownOpen\", this.toggleOpenEnd);\n  };\n\n  private openCalciteDropdown = () => {\n    this.open = !this.open;\n    if (this.open) {\n      this.el.addEventListener(\"calciteDropdownOpen\", this.toggleOpenEnd);\n    }\n  };\n\n  private updateTabIndexOfItems(target: HTMLCalciteDropdownItemElement): void {\n    this.items.forEach((item: HTMLCalciteDropdownItemElement) => {\n      item.tabIndex = target !== item ? -1 : 0;\n    });\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-dropdown-width: Specifies the width of the component's wrapper.\n */\n\n:host {\n  @apply inline-block;\n}\n\n@include disabled();\n\n:host .calcite-dropdown-wrapper {\n  --calcite-floating-ui-z-index: theme(\"zIndex.dropdown\");\n  @include floatingUIContainer();\n  @include floatingUIWrapper();\n}\n\n@include floatingUIElemAnim(\".calcite-dropdown-wrapper\");\n:host([open]) .calcite-dropdown-wrapper {\n  @include floatingUIWrapperActive();\n}\n\n:host .calcite-dropdown-content {\n  @apply bg-foreground-1\n    w-auto\n    overflow-y-auto\n    overflow-x-hidden\n    max-h-menu;\n  inline-size: var(--calcite-dropdown-width);\n}\n.calcite-trigger-container {\n  @apply relative flex flex-auto h-full;\n  @include word-break;\n}\n\n@media (forced-colors: active) {\n  /* use real border since box-shadow is removed in high contrast mode */\n  :host([open]) .calcite-dropdown-wrapper {\n    border: 1px solid canvasText;\n  }\n}\n\n// width\n:host([width-scale=\"s\"]) {\n  --calcite-dropdown-width: theme(\"spacing.48\");\n}\n:host([width-scale=\"m\"]) {\n  --calcite-dropdown-width: theme(\"spacing.56\");\n}\n:host([width-scale=\"l\"]) {\n  --calcite-dropdown-width: theme(\"spacing.64\");\n}\n\n@include base-component();\n"],"names":["SLOTS","Dropdown","proxyCustomElement","HTMLElement","items","groups","mutationObserver","createObserver","this","updateItems","resizeObserver","entries","resizeObserverCallback","openTransitionProp","guid","concat","setFilteredPlacements","el","flipPlacements","filteredFlipPlacements","filterValidFlipPlacements","updateTriggers","event","triggers","target","assignedElements","flatten","reposition","map","group","Array","from","querySelectorAll","reduce","previousValue","currentValue","updateSelectedItems","forEach","item","scale","updateGroups","filter","matches","updateGroupScale","entry","referenceEl","setDropdownWidth","scrollerEl","setMaxScrollerHeight","referenceElWidth","clientWidth","style","minWidth","maxScrollerHeight","getMaxScrollerHeight","maxHeight","setScrollerAndTransitionEl","observe","transitionEl","setReferenceEl","connectFloatingUI","floatingEl","setFloatingEl","keyDownHandler","composedPath","includes","defaultPrevented","key","open","closeCalciteDropdown","preventDefault","shiftKey","isActivationKey","openCalciteDropdown","focusOnFirstActiveOrFirstItem","getFocusableElement","getTraversableItems","find","selected","toggleOpenEnd","removeEventListener","addEventListener","defaultMenuPlacement","openHandler","onToggleOpenCloseComponent","disabled","handleDisabledChange","value","flipPlacementsHandler","maxItemsHandler","overlayPositioningHandler","placementHandler","handlePropsChange","setFocus","componentFocusable","focus","connectedCallback","_this$mutationObserve","childList","subtree","connectInteractive","componentWillLoad","setUpLoadableComponent","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","disconnectedCallback","_this$mutationObserve2","_this$resizeObserver","disconnect","disconnectInteractive","disconnectFloatingUI","render","h","Host","InteractiveContainer","class","id","onClick","onKeyDown","ref","toAriaBoolean","name","onSlotchange","FloatingCSS","animation","animationActive","role","delayed","arguments","length","undefined","placement","overlayPositioning","type","closeCalciteDropdownOnClick","closeCalciteDropdownOnEvent","stopPropagation","closeCalciteDropdownOnOpenEvent","pointerEnterHandler","pointerLeaveHandler","hidden","calciteInternalDropdownItemKeyEvent","keyboardEvent","detail","traversableItems","updateTabIndexOfItems","focusElementInGroup","handleItemSelect","calciteDropdownSelect","emit","closeOnSelectDisabled","requestedDropdownGroup","selectionMode","_this$groups","onBeforeOpen","calciteDropdownBeforeOpen","onOpen","calciteDropdownOpen","onBeforeClose","calciteDropdownBeforeClose","onClose","calciteDropdownClose","selectedItems","maxItems","groupHeaderHeight","itemsToProcess","children","index","isNaN","offsetTop","offsetHeight","focusTrigger","focusElement","tabIndex"],"sourceRoot":""}