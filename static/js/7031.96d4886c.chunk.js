"use strict";(self.webpackChunksc_utility=self.webpackChunksc_utility||[]).push([[7031],{37031:(e,t,i)=>{i.r(t),i.d(t,{default:()=>_t});var n=i(27366),s=i(44055),r=i(11582),a=i(10064),o=i(32718),l=i(97642),c=i(66978),u=i(94172),h=i(49861),f=i(25243),d=(i(84936),i(93169)),p=i(69912),m=i(30651),y=i(11936),g=i(6693),x=i(46671),b=(i(59486),i(45918)),w=i(76200),v=i(44927),I=i(27135),_=i(38511),R=i(92975),S=i(25899),T=i(70361),C=i(86591),k=i(22678),F=i(60117),O=i(41625),P=i(79586),M=i(22824),D=i(80885),B=i(46784),N=i(59068),J=i(32014),Z=i(21969);var E=i(80394),A=i(848);const z=new Map,L=new class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:15e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3;this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.refCount--,e.refCount<=0&&(n.delete(i),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.ts=Date.now(),e.refCount++,n.delete(i),n.set(i,e),e.block}return null}putBlock(e,t,i,n){const s=this._cachedBlocks,r=e+"/"+t;if(s.has(r)){const e=s.get(r);e.ts=Date.now(),e.refCount++}else s.set(r,{block:i,ts:Date.now(),refCount:1,controller:n});this._trim(),this._updateTimer()}deleteBlock(e,t){const i=this._cachedBlocks,n=e+"/"+t;i.has(n)&&i.delete(n)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),i=Date.now();for(let n=0;n<t.length&&t[n][1].ts<=i-this._duration;n++)e.delete(t[n][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let i=0;i<t.length-this._size;i++)e.delete(t[i][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}};function H(e,t){return null==t?e:`${e}?sliceId=${t}`}function W(e,t,i){const n=z.get(e);if(!n)return null==t?L.decreaseRefCount(e,i):0;if(null==t||null==n[t])return L.decreaseRefCount(e,i);const s=n[t]?.cache,r=s?.get(i);if(s&&r){if(r.refCount--,0===r.refCount){s.delete(i);for(let e=0;e<n.length;e++)n[e]?.cache.delete(i);r.controller&&r.controller.abort()}return r.refCount}return 0}function q(e,t,i){const n=z.get(e);if(!n)return null==t?L.getBlock(e,i):null;if(null==t||null==n[t]){for(let e=0;e<n.length;e++){const t=n[e]?.cache.get(i);if(t)return t.refCount++,t.block}return L.getBlock(e,i)}const s=n[t]?.cache.get(i);if(s)return s.refCount++,s.block;for(let r=0;r<n.length;r++){if(r===t||!n[r])continue;const e=n[r]?.cache,s=e?.get(i);if(e&&s)return s.refCount++,e.set(i,s),s.block}return null}function G(e,t,i,n){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;const r=z.get(e);if(!r)return void(null==t&&L.putBlock(e,i,n,s));if(null==t||null==r[t])return void L.putBlock(e,i,n,s);const a={refCount:1,block:n,isResolved:!1,isRejected:!1,controller:s};n.then((()=>a.isResolved=!0)).catch((()=>a.isRejected=!0)),r[t]?.cache.set(i,a)}function j(e,t,i){const n=z.get(e);n?null!=t&&null!=n[t]?n[t]?.cache.delete(i):L.deleteBlock(e,i):null==t&&L.deleteBlock(e,i)}var U=i(92089),$=i(45502),V=i(17314),Y=i(64145),X=i(38164),K=i(53866),Q=i(78952);let ee=0,te=class extends B.wq{constructor(){super(...arguments),this._tileFetchQueue=new X.e({concurrency:32,process:(e,t)=>this._fetchRawTile(e.pyramidLevel,e.row,e.col,{...e.options,signal:t})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}normalizeCtorArgs(e){return e?.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:M.Z.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=(0,E.ut)(e.spatialReference);return null!=t&&e.extent.width>=t/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return null==e||"gcs-shift"===e.type}set rasterJobHandler(e){this._set("rasterJobHandler",e),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((t=>t.rasterJobHandler=e))}get rasterId(){return this.url||"rasterId-"+ee++}set url(e){this._set("url",(0,S.Nm)(e,o.Z.getLogger(this)))}async open(e){return this._openPromise??=(0,E.zD)().then((()=>this._open(e))),this._openPromise}async fetchTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const s=n.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(e,t,i,s);return n={noClip:!0,...n},this.fetchPixels(r,s.size[0],s.size[1],n)}async identify(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e=(0,f.TJ)(A.Z,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:n}=t,{rasterInfo:s}=this,{hasMultidimensionalTranspose:r,multidimensionalInfo:a}=s;let{transposedVariableName:o}=t;const l=null!=a&&r&&(null!=n||(0,Z.WU)(i));l&&!o&&(o=null!=i&&i.length>0?i[0].variableName??void 0:a.variables[0].name,t={...t,transposedVariableName:o}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:c,extent:u}=s,{datumTransformation:h}=t;let d=(0,E.nF)(e,c,h);if(!u.intersects(d))return{location:d,value:null};if(null!=s.transform){const e=s.transform.inverseTransform(d);if(!s.nativeExtent.intersects(e))return{location:e,value:null};d=e}let p=0;const m=null!=o&&null!=a&&s.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(m)return e.identify(d,t);const{pixelSize:n}=s,r=3,a=n.x*r/2,o=n.y*r/2,l=new K.Z({xmin:d.x-a,xmax:d.x+a,ymin:d.y-o,ymax:d.y+o,spatialReference:c}),u={interpolation:"nearest",multidimensionalDefinition:i,sliceId:t.sliceId},{pixelBlock:h}=await e.fetchPixels(l,r,r,u),{pixelBlock:f}=await this.fetchPixels(l,r,r,u);if(null==h)return{location:d,value:null};const p=Math.floor(r*r*.5),y=!h.mask||h.mask[p]?h.pixels.map((e=>e[p])):null;let g;return null!=f&&(g=!f.mask||f.mask[p]?f.pixels.map((e=>e[p])):void 0),{location:d,value:y,processedValue:g,pyramidLevel:0}}if(!m)if(t.srcResolution)p=(0,E.kr)(t.srcResolution,s,this.ioConfig.sampling).pyramidLevel;else if(p=await this.computeBestPyramidLevelForLocation(e,t),null==p)return{location:d,value:null};const y=this.identifyPixelLocation(d,p,null,m);if(null===y)return{location:d,value:null};const{row:g,col:x,rowOffset:b,colOffset:w,blockWidth:v}=y,I=o??t.sliceId,_=H(this.rasterId,I),R=`${p}/${g}/${x}`;let S=q(_,null,R);null==S&&(S=this.fetchRawTile(p,g,x,t),G(_,null,R,S));const T=await S;if(!T?.pixels?.length)return{location:d,value:null};const C=b*v+w;return this._processIdentifyResult(T,{srcLocation:d,position:C,pyramidLevel:p,useTransposedTile:!!m,requestSomeSlices:l,identifyOptions:t})}async fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};e=(0,E.Fi)(e),n=this._getRequestOptionsWithSliceId(n);const{_hasNoneOrGCSShiftTransform:s}=this;if(n.requestRawData&&s)return this._fetchPixels(e,t,i,n);const r=(0,E.ut)(e.spatialReference),a=(0,E.Hq)(e);if(null==r||0===a||1===a&&this._isGlobalWrappableSource&&s)return this._fetchPixels(e,t,i,n);if(a>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:l,xmax:c}=e,u=Math.round(r/(c-l)*t),h=u-Math.round((r/2-l)/(c-l)*t);let f=0;const d=[];for(let g=0;g<=a;g++){const s=new K.Z({xmin:0===g?l:-r/2,xmax:g===a?c-r*g:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),p=0===g?u-h:g===a?t-f:u;f+=p,d.push(p);const m=n.disableWrapAround&&g>0?null:this._fetchPixels(s,p,i,n);o.push(m)}const p=(await Promise.all(o)).map((e=>e?.pixelBlock));let m=null;const y={width:t,height:i};return m=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:d},n)).pixelBlock:(0,V.us)(p,y,{blockWidths:d}),{extent:e,srcExtent:(0,E.tB)(e,this.rasterInfo.spatialReference,n.datumTransformation),pixelBlock:m}}async fetchRawPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};t={x:Math.floor(t.x),y:Math.floor(t.y)};const s=await this._fetchRawTiles(e,t,i,n),{nativeExtent:r,nativePixelSize:a,storageInfo:o}=this.rasterInfo,l=2**e,c=a.x*l,u=a.y*l,h=new K.Z({xmin:r.xmin+c*t.x,xmax:r.xmin+c*(t.x+i.width-1),ymin:r.ymax-u*(t.y+i.height-1),ymax:r.ymax-u*t.y,spatialReference:r.spatialReference});if(!s)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:f,mosaicSize:d}=s;if(1===f.length&&null!=f[0]&&f[0].width===i.width&&f[0].height===i.height)return{extent:h,srcExtent:h,pixelBlock:s.pixelBlocks[0]};const p=e>0?o.pyramidBlockWidth:o.blockWidth,m=e>0?o.pyramidBlockHeight:o.blockHeight,y={x:t.x%p,y:t.y%m};let g;return g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:d,destDimension:i,clipOffset:y,clipSize:i,coefs:null,sampleSpacing:null,interpolation:n.interpolation,alignmentInfo:null,blockWidths:null},n)).pixelBlock:(0,V.us)(f,d,{clipOffset:y,clipSize:i}),{extent:h,srcExtent:h,pixelBlock:g}}fetchRawTile(e,t,i,n){throw new a.Z("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return(0,E.tB)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?(0,$.J)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const{customFetchParameters:n}=this.ioConfig,{range:s,query:r,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const o=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await(0,w.Z)(e,{...t,query:{...r,...n},headers:{...a,...o}})}catch(L){if(i>0)return i--,this.request(e,t,i);throw L}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return null==t||null==e||0===e.length?null:(0,Z.gk)(e,t)}getTileExtentFromTileInfo(e,t,i,n){const s=n.lodAt(e);return this.getTileExtent({x:s.resolution,y:s.resolution},t,i,n.origin,n.spatialReference,n.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:n}=this.rasterInfo,{pyramidResolutions:s}=e;if(!e.tileInfo){const r=[],a=e.maximumPyramidLevel||0;let o=(n.x+n.y)/2,l=1/.0254*96*o;for(let e=0;e<=a&&(r.unshift(new N.Z({level:a-e,resolution:o,scale:l})),e!==a);e++)if(s){const t=(s[e].x+s[e].y)/2;l*=t/o,o=t}else o*=2,l*=2;const c=new A.Z({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new M.Z({origin:c,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:512,n=arguments.length>3?arguments[3]:void 0;const{width:s,height:r,nativeExtent:a,pixelSize:o,spatialReference:l}=e,c=new A.Z({x:a.xmin,y:a.ymax,spatialReference:l});null==n&&(n=Math.max(0,Math.round(Math.log(Math.max(s,r))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],n);e.storageInfo=new J.Z({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:n,blockBoundary:u})}async computeBestPyramidLevelForLocation(e){return 0}computeBlockBoundary(e,t,i,n,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:2;if(1===s.length&&r>0){s=[...s];let{x:e,y:t}=s[0];for(let i=0;i<r;i++)e*=a,t*=a,s.push({x:e,y:t})}const o=[],{x:l,y:c}=n;for(let u=0;u<s.length;u++){const{x:n,y:r}=s[u];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*r)/i/r),maxRow:Math.floor((c-e.ymin-.1*r)/i/r)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo;if(0===e)return t;if(null!=i&&i.length)return i[e-1];const s=n**e;return{x:t.x*s,y:t.y*s}}identifyPixelLocation(e,t,i,n){const{spatialReference:s,nativeExtent:r,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:o,origin:l,transposeInfo:c}=a,u=n&&null!=c?c.tileSize[0]:a.blockWidth,h=n&&null!=c?c.tileSize[1]:a.blockHeight,f=(0,E.nF)(e,s,i);if(!r.intersects(f))return null;if(t<0||t>o)return null;const d=this.getPyramidPixelSize(t),{x:p,y:m}=d,y=(l.y-f.y)/m/h,g=(f.x-l.x)/p/u,x=Math.min(h-1,Math.floor((y-Math.floor(y))*h)),b=Math.min(u-1,Math.floor((g-Math.floor(g))*u));return{pyramidLevel:t,row:Math.floor(y),col:Math.floor(g),rowOffset:x,colOffset:b,blockWidth:u,srcLocation:f}}getTileExtent(e,t,i,n,s,r){const[a,o]=r,l=n.x+i*a*e.x,c=l+a*e.x,u=n.y-t*o*e.y,h=u-o*e.y;return new K.Z({xmin:l,xmax:c,ymin:h,ymax:u,spatialReference:s})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];return!n||n.maxRow<t||n.maxCol<i||n.minRow>t||n.minCol>i}updateImageSpaceRasterInfo(e){const{pixelSize:t}=e,{width:i,height:n}=e,s=Q.Z.WebMercator;e.spatialReference=s,e.extent=e.nativeExtent=new K.Z({xmin:-.5,ymax:.5,xmax:i-.5,ymin:.5-n,spatialReference:s}),e.isPseudoSpatialReference=!0,e.transform=null,e.pixelSize=new A.Z({x:1,y:1,spatialReference:s});const{extent:r,storageInfo:a}=e;if(a){a.origin=new A.Z({x:r.xmin,y:r.ymax,spatialReference:s});const{pyramidResolutions:i,tileInfo:n}=a;if(i&&i.forEach((e=>{e.x/=t.x,e.y/=t.y})),n){n.origin=a.origin;const t=(e.nativePixelSize.x+e.nativePixelSize.y)/2;n.lods.forEach(((e,i)=>{e.resolution=t*2**i,e.scale=96*e.resolution/.0254}))}}}async _fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=(0,E.Hq)(e);if(s>=2)return{extent:e,pixelBlock:null};const r=this._getSourceDataInfo(e,t,i,n),{pyramidLevel:a,srcResolution:o,srcExtent:l,srcWidth:c,srcHeight:u,ul:h}=r;if(0===c||0===u)return{extent:e,srcExtent:l,pixelBlock:null};const{rasterInfo:f}=this,d=f.transform,p="gcs-shift"===d?.type,m=null!=(0,E.ut)(e.spatialReference);!p&&m||(s=(0,E.Hq)(r.srcExtent,p));const y=await this._fetchRawTiles(a,h,{width:c,height:u,wrapCount:s},n);if(!y)return{extent:e,srcExtent:l,pixelBlock:null};const g=f.storageInfo,x=a>0?g.pyramidBlockWidth:g.blockWidth,b=a>0?g.pyramidBlockHeight:g.blockHeight;let{x:w,y:v}=f.pixelSize;if(a>0){const{pyramidResolutions:e,pyramidScalingFactor:t}=g;if(null!=e&&e[a-1])({x:w,y:v}=e[a-1]);else{const e=t**a;w*=e,v*=e}}const I=f.spatialReference,_=new A.Z({x:w,y:v,spatialReference:I}),R=x===c&&b===u&&h.x%x==0&&h.y%b==0,S=new A.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),T=!e.spatialReference.equals(I),C=I.isGeographic?1e-9:1e-4,{datumTransformation:k}=n;if(!T&&R&&1===y.pixelBlocks.length&&x===t&&b===i&&function(e,t,i){return Math.abs(e.x-t.x)<i&&Math.abs(e.y-t.y)<i}(o,S,C))return{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:y.pixelBlocks[0]};const F=m&&null!=(0,E.ut)(l.spatialReference)&&this._hasNoneOrGCSShiftTransform,O=n.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");O&&!this.rasterJobHandler&&await(0,E.zD)();const P=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:S.toJSON(),datumTransformation:k,rasterTransform:d,hasWrapAround:s>0||F,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:O},n):(0,E.Qp)({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:S,datumTransformation:k,rasterTransform:d,hasWrapAround:s>0||F,isAdaptive:!1,includeGCSGrid:O});let M;const D=!n.requestRawData,B={rows:P.spacing[0],cols:P.spacing[1]},N=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(a,y.extent.xmin):void 0,{pixelBlocks:J,mosaicSize:Z,isPartiallyFilled:z}=y;let L=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:J,srcMosaicSize:Z,destDimension:D?{width:t,height:i}:null,coefs:D?P.coefficients:null,sampleSpacing:D?B:null,projectDirections:O,gcsGrid:O?P.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:n.interpolation,alignmentInfo:N,blockWidths:null},n);({pixelBlock:M,localNorthDirections:L}=e)}else{const e=(0,V.us)(J,Z,{alignmentInfo:N});M=D?(0,V.Uk)(e,{width:t,height:i},P.coefficients,B,n.interpolation):e,O&&P.gcsGrid&&(L=(0,V.Qh)({width:t,height:i},P.gcsGrid),M=(0,Y.xQ)(M,this.rasterInfo.dataType,L))}return n.requestRawData||O?{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:M,transformGrid:P,localNorthDirections:L,isPartiallyFilled:z}:{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:M}}async _fetchRawTiles(e,t,i,n){const{origin:s,blockBoundary:r}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(e);let{x:l,y:c}=t,{width:u,height:h,wrapCount:f}=i;const d=this._getRasterTileAlignmentInfo(e,0);n.buffer&&(l-=n.buffer.cols,c-=n.buffer.rows,u+=2*n.buffer.cols,h+=2*n.buffer.rows);let p=0,m=0,y=0;f&&null!=d&&(({worldColumnCountFromOrigin:m,originColumnOffset:y,rightPadding:p}=d),m*d.blockWidth-p>=l+u&&(p=0));const g=Math.floor(l/a),x=Math.floor(c/o),b=Math.floor((l+u+p-1)/a),w=Math.floor((c+h+p-1)/o),v=r[e];if(!v)return null;const{minRow:I,minCol:_,maxCol:R,maxRow:S}=v;if(0===f&&(w<I||b<_||x>S||g>R))return null;const T=new Array;let C=!1;const k=null==this.ioConfig.allowPartialFill?n.allowPartialFill:this.ioConfig.allowPartialFill;for(let N=x;N<=w;N++)for(let t=g;t<=b;t++){let i=t;if(!n.disableWrapAround&&f&&null!=d&&m<=t&&(i=t-m-y),N>=I&&i>=_&&S>=N&&R>=i){const t=this._tileFetchQueue.push({pyramidLevel:e,row:N,col:i,options:n},{signal:n.signal});k?T.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{C=!0,e(null)}))}))):T.push(t)}else T.push(Promise.resolve(null))}if(0===T.length)return null;const F=await Promise.all(T),O={height:(w-x+1)*o,width:(b-g+1)*a},{spatialReference:P}=this.rasterInfo,M=this.getPyramidPixelSize(e),{x:D,y:B}=M;return{extent:new K.Z({xmin:s.x+g*a*D,xmax:s.x+(b+1)*a*D,ymin:s.y-(w+1)*o*B,ymax:s.y-x*o*B,spatialReference:P}),pixelBlocks:F,mosaicSize:O,isPartiallyFilled:C}}_fetchRawTile(e,t,i,n){const s=this.rasterInfo.storageInfo.blockBoundary[e];if(!s)return Promise.resolve(null);const{minRow:r,minCol:a,maxCol:o,maxRow:l}=s;if(t<r||i<a||t>l||i>o)return Promise.resolve(null);const u=H(this.rasterId,n.sliceId),h=`${e}/${t}/${i}`;let f=q(u,n.registryId,h);if(null==f){const s=new AbortController;f=this.fetchRawTile(e,t,i,{...n,signal:s.signal}),G(u,n.registryId,h,f,s),f.catch((()=>j(u,n.registryId,h)))}return n.signal&&(0,c.fu)(n,(()=>{W(u,n.registryId,h)})),f}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const n=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[s,r]=e,a=[],o=[];for(let l=0;l<n;l++){const[e,t]=(0,Y.Tg)([s[l],r[l]]);a.push(e),o.push(t)}return[a,o]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=(0,E.P_)(this.rasterInfo)),null==this._rasterTileAlignmentInfo.pyramidsInfo?null:{startX:t,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const s={datumTransformation:n.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};n.srcResolution&&(s.srcResolution=n.srcResolution,this._updateSourceDataInfo(e,s));const r=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=s,c=a/t,u=o/i,h=l<r&&c*u>=16,f=l===r&&this._requireTooManySrcTiles(a,o,t,i);if(h||f||0===a||0===o){const a=new A.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=(0,E.VO)(a,this.rasterInfo.spatialReference,e,s.datumTransformation);const f=!o||n.srcResolution&&o.x+o.y<n.srcResolution.x+n.srcResolution.y;if(h&&n.srcResolution&&f){const e=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(r-l+3>=e){const t=2**e;o={x:n.srcResolution.x*t,y:n.srcResolution.y*t}}}o&&(s.srcResolution=o,this._updateSourceDataInfo(e,s))}return this._requireTooManySrcTiles(s.srcWidth,s.srcHeight,t,i)&&(s.srcWidth=0,s.srcHeight=0),s}_requireTooManySrcTiles(e,t,i,n){const{tileInfo:s}=this.rasterInfo.storageInfo,r=e/i,a=t/n;return Math.ceil(e/s.size[0])*Math.ceil(t/s.size[1])>=256*Math.max(1,(i+n)/1024)||r>8||a>8}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const{rasterInfo:i}=this,n=i.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:a,pyramidResolution:o,excessiveReading:l}=(0,E.kr)(s,i,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||(0,E.tB)(e,n,r);if(null==c)return;const u=i.transform;u&&(c=u.inverseTransform(c)),t.srcExtent=c;const{x:h,y:f}=i.storageInfo.origin,d=Math.floor((c.xmin-h)/o.x+.1),p=Math.floor((f-c.ymax)/o.y+.1),m=Math.floor((c.xmax-h)/o.x-.1),y=Math.floor((f-c.ymin)/o.y-.1),g=c.width<.1*o.x?0:m-d+1,x=c.height<.1*o.y?0:y-p+1;t.pyramidLevel=a,t.pyramidResolution=o,t.srcWidth=g,t.srcHeight=x,t.ul={x:d,y:p}}_getRequestOptionsWithSliceId(e){return null!=this.rasterInfo.multidimensionalInfo&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:n,pyramidLevel:s,useTransposedTile:r}=t,a=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[n])return{location:i,value:null};const{multidimensionalInfo:o}=this.rasterInfo;if(null==o||!r){const t=e.pixels.map((e=>e[n])),r={location:i,value:t,pyramidLevel:s},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(r.magdirValue=a.map((e=>e[0]))),r}let l=e.pixels.map((e=>e.slice(n*a,n*a+a))),c=this._computeMagDirValues(l);const{requestSomeSlices:u,identifyOptions:h}=t;let f=(0,Z.MO)(o,h.transposedVariableName);if(u){const e=(0,Z.Ur)(f,h.multidimensionalDefinition,h.timeExtent);l=l.map((t=>e.map((e=>t[e])))),c=c?.map((t=>e.map((e=>t[e])))),f=e.map((e=>f[e]))}const d=e.noDataValues||this.rasterInfo.noDataValue,p={pixels:l,pixelType:e.pixelType};let m;return null!=d&&((0,U.Ao)(p,d),m=p.mask),{location:i,value:null,dataSeries:f.map(((e,t)=>{const i={value:0===m?.[t]?null:l.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new C.Z({...e,isSlice:!0})))};return c?.length&&(i.magdirValue=[c[0][t],c[1][t]]),i})),pyramidLevel:s}}};(0,n._)([(0,h.Cb)()],te.prototype,"_rasterTileAlignmentInfo",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"_tileFetchQueue",void 0),(0,n._)([(0,h.Cb)({readOnly:!0})],te.prototype,"_isGlobalWrappableSource",null),(0,n._)([(0,h.Cb)({readOnly:!0})],te.prototype,"_hasNoneOrGCSShiftTransform",null),(0,n._)([(0,h.Cb)()],te.prototype,"_openPromise",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"rasterJobHandler",null),(0,n._)([(0,h.Cb)({readOnly:!0})],te.prototype,"rasterId",null),(0,n._)([(0,h.Cb)(T.HQ)],te.prototype,"url",null),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],te.prototype,"datasetName",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],te.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"hasUniqueSourceStorageInfo",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"rasterInfo",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"ioConfig",void 0),(0,n._)([(0,h.Cb)()],te.prototype,"sourceJSON",void 0),te=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.BaseRaster")],te);const ie=te;var ne=i(68416),se=i(49818);let re=class extends ie{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{rasters:s,rasterIds:r}=this.primaryRasters;let a=!1;const{interpolation:o}=n,l=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!n.requestRawData&&l&&(a=1===s.length&&!n.skipRasterFunction,n={...n,interpolation:"bilinear",requestRawData:a});const c=s.map((s=>s.fetchPixels(e,t,i,n))),u=await Promise.all(c),h=u.map((e=>e.pixelBlock)),f=a||n.requestRawData?u.map((e=>e.srcTilePixelSize)):null;if(n.skipRasterFunction||h.every((e=>null==e)))return u[0];const d=u.find((e=>null!=e.pixelBlock))?.extent??e;let p=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:r}):this.rasterFunction.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:r});const{transformGrid:m}=u[0];if(!a||null==p||null==m){const e=n.noClip?null:this.getClippingGeometry(d.spatialReference);return n.noClip||n.requestRawData||null==p||!e||(p=await(0,ne.oq)(p,d,e)),{...u[0],pixelBlock:p}}const y={rows:m.spacing[0],cols:m.spacing[1]};let g;g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[p],srcMosaicSize:{width:p.width,height:p.height},destDimension:{width:t,height:i},coefs:m.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},n)).pixelBlock:(0,V.Uk)(p,{width:t,height:i},m.coefficients,y,o);const x=n.noClip?null:this.getClippingGeometry(e.spatialReference);return n.noClip||n.requestRawData||null==g||null==x||(g=await(0,ne.oq)(g,e,x)),{extent:e,srcExtent:u[0].srcExtent,pixelBlock:g}}getClippingGeometry(e){const t=this._clippingGeometry.get("0");if(!e||!t)return t;const i=function(e){return String(e.wkid??e.wkt??e.wkt2)}(e);let n=this._clippingGeometry.get(i);return null!=n||(n=e.equals(t.spatialReference)?t:(0,E.Wt)(t,e),this._clippingGeometry.set(i,n)),n}async _open(e){const{rasterFunction:t}=this;this.primaryRasters?.rasters?.length?t.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=t.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((e=>e.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:n}=this.primaryRasters,s=i.map((t=>t.rasterInfo?void 0:t.open(e)));await Promise.all(s);const r=i.map((e=>{let{rasterInfo:t}=e;return t})),o=t.bind({rasterInfos:r,rasterIds:n});if(t.rawSourceRasterInfos=r,!o.success||0===r.length)throw new a.Z("raster-function:open",`cannot bind the function: ${o.error??""}`);const l="Table"===t.functionName?t:t.functionArguments?.raster;"Table"===l?.functionName&&(t.rasterInfo.attributeTable=se.Z.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=r[0];this.hasUniqueSourceStorageInfo=1===r.length||r.slice(1).every((e=>function(e,t){const{storageInfo:i,pixelSize:n,spatialReference:s,extent:r}=e,{storageInfo:a,pixelSize:o,spatialReference:l,extent:c}=t;return n.x===o.x&&n.y===o.y&&s.equals(l)&&r.equals(c)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}(e,c))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",t.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async _updateClipGeometry(){const e=this.rasterFunction.getClippingGeometries()[0];let t=e?.clippingGeometry;if(t&&"inside"===e.clippingType){const{extent:e}=this.rasterInfo,{difference:n,densify:s}=await Promise.all([i.e(9058),i.e(2170)]).then(i.bind(i,2170));let r=s(D.Z.fromExtent(e),2*(e.width+e.height)/40);r=(0,E.Wt)(r,t.spatialReference),t=n(r,t)}this._clippingGeometry.clear(),t&&this._clippingGeometry.set("0",t)}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],re.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],re.prototype,"tileType",void 0),(0,n._)([(0,h.Cb)()],re.prototype,"rasterFunction",void 0),(0,n._)([(0,h.Cb)()],re.prototype,"primaryRasters",void 0),re=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.FunctionRaster")],re);const ae=re;var oe=i(2657),le=i(21449),ce=i(73425),ue=i(43238),he=i(50254),fe=i(55185);const de=e=>{let t=class extends e{constructor(){super(...arguments),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===(arguments.length<=0?void 0:arguments[0])?.raster?.datasetFormat}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}get rasterInfo(){return(0,v.Mr)(o.Z.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(e){this._set("url",(0,S.Nm)(e,o.Z.getLogger(this)))}get renderer(){if("imagery-tile"!==this.type)return this.internalRenderer;const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const i=t?.find((t=>{let{name:i}=t;return i===e}));return i?.renderer.clone()}return this.internalRenderer}set renderer(e){"imagery-tile"===this.type&&(this.activePresetRendererName=null),this.internalRenderer=e}set internalRenderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("internalRenderer",e),this.updateRenderer())}readRenderer(e,t,i){const n=t?.layerDefinition?.drawingInfo?.renderer;return(0,b.ij)(n,i)||void 0}async convertVectorFieldData(e,t){const{serviceRasterInfo:i}=this;if(null==e||!i)return null;const n=this._rasterJobHandler.instance,s=i.dataType;return n?n.convertVectorFieldData({pixelBlock:e,dataType:s},t):(0,Y.KC)(e,s)}async computeStatisticsHistograms(e,t){await this.load(t),e=(0,f.TJ)(he.Z,e).clone();const{serviceRasterInfo:i}=this;if(null==i)throw new a.Z("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:n}=e;if(null==n)throw new a.Z("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let s=n;const{spatialReference:r}=i;n.spatialReference.equals(r)||(await(0,E.zD)(),s="extent"===n.type?(0,E.tB)(n,r):(0,E.Wt)(n,r));const o=e.pixelSize??new A.Z({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:r}),{extent:l,width:c,height:u}=(0,ne.kO)(i,s,o),h=await this.fetchPixels(l,c,u,{...t,interpolation:"nearest"});if(null==h.pixelBlock)throw new a.Z("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const d=await(0,ne.oq)(h.pixelBlock,l,s),p=this._rasterJobHandler.instance;return p?p.computeStatisticsHistograms({pixelBlock:d},t):(0,le.js)(d)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):(0,fe.GE)(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.serviceRasterInfo??{};if(null==t)return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;i?.length||(i=(0,Z.Tj)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=e.timeExtent||this.timeExtent;if(null!=i&&null!=n&&(null!=n.start||null!=n.end)){i=i.map((e=>e.clone()));const s=t.variables.find((e=>{let{name:t}=e;return t===i[0].variableName}))?.dimensions?.find((e=>{let{name:t}=e;return"StdTime"===t})),r=i.find((e=>{let{dimensionName:t}=e;return"StdTime"===t}));if(!s||!r)return{...e,multidimensionalDefinition:null};const{start:a,end:o}=n,l=null==a?null:a.getTime(),c=null==o?null:o.getTime(),u=l??c,h=c??l;if(null!=s.values){const e=s.values.filter((e=>{if(Array.isArray(e)){if(u===h)return e[0]<=u&&e[1]>=u;const t=e[0]<=u&&e[1]>u||e[0]<h&&e[1]>=h,i=e[0]>=u&&e[1]<=h||e[0]<u&&e[1]>h;return t||i}return u===h?e===u:e>=u&&e<=h}));if(e.length){const t=e.sort(((e,t)=>{const i=Array.isArray(e)?e[0]:e,n=Array.isArray(e)?e[1]:e,s=Array.isArray(t)?t[0]:t,r=Array.isArray(t)?t[1]:t;return u===h?i-s:Math.abs(n-h)-Math.abs(r-h)}))[0];r.values=[t]}else i=null}else if(s.hasRegularIntervals&&s.extent){const[e,t]=s.extent;u>t||h<e?i=null:r.values=u===h?[u]:[Math.max(e,u),Math.min(t,h)]}}return null!=i&&(0,Z.nb)(i,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const e=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&e&&this._set("rasterFunction",O.Z.fromJSON(e)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let e,t=this.raster,i=!1;"Function"===t.datasetFormat?(e=t.primaryRasters.rasters,t=e[0],i=!0):e=[t];const{rasterFunction:n}=this;if(n){const i={raster:t};e.length>1&&e.forEach((e=>i[e.url]=e));const s=(0,oe.Ue)(n.functionDefinition?.toJSON()??n.toJSON(),i),r=new ae({rasterFunction:s});r.rasterJobHandler=this._rasterJobHandler.instance,await r.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=r}else this.raster=t,this._cachedRasterFunctionJson=null,await t.open();if(this._cachedRendererJson=null,!i&&!n)return;const{bandIds:s}=this,{bandCount:r}=this.raster.rasterInfo,a=s?.length?s.some((e=>e>=r)):r>=3;s&&(a||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t||!this.renderer)return;const{rasterInfo:i}=this.raster,n=(0,Z.N3)(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=n?.name,r=(0,ce.ol)({...this.renderer.toJSON(),variableName:s});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(r))return;const a=this._rasterJobHandler.instance;a&&(t.rasterInfo=(0,ce.FI)(i,s),t.rendererJSON=r,t.bind(),await a.updateSymbolizer(t),this._cachedRendererJson=r)}async applyRenderer(e,t){const i=e?.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let n;await this.updateRenderer();const s=this._rasterJobHandler.instance,r=this.bandIds??[];return n=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:r}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:r}),n}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t){let i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.loaded||null==t)return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const n=(0,R.C5)(e);return M.Z.create({size:256,spatialReference:e,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(i(this),s.requestAsImageElement){const i=this.getTileUrl(e,t,n);return(0,w.Z)(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((e=>e.data))}const{serviceRasterInfo:r}=this;if(null!=r.multidimensionalInfo&&null==(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition){const i=s.tileInfo||r.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,n,i),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(s={...s,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,n,s)}async fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),i=Math.round(i),this.raster.fetchPixels(e,t,i,n))}async identify(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};await this.load();const{raster:i,serviceRasterInfo:n}=this;if(null!=n?.multidimensionalInfo&&(!n.hasMultidimensionalTranspose||!((0,Z.WU)(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent))&&null==(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition)return{location:e,value:null};const s=this.multidimensionalSubset?.areaOfInterest;if(s&&!s.contains(e))throw new a.Z("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.serviceRasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,i=t?.[0]?.variableName;return e.variables.some((e=>e.name===i&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo?.multidimensionalInfo;return(0,Z.jj)(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=(0,Z.Tj)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new P.Z;return this._rasterJobHandler.connectionPromise=e.initialize().then((async()=>{i(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){i(this);const{raster:e}=this,t=(0,ce.In)(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"no";i(this);const{rasterInfo:t}=this.raster,n=(0,Z.N3)(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=n?.name,r=(0,ce.RA)({variableName:s,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&t.bandCount>1&&(this.bandIds=r?.bandIds??(0,ce.YD)(t)),!this.renderer||"override"===e){const e=(0,ce.kc)(this.raster),i=r?.renderer??(0,ce.Ob)(t,{bandIds:this.bandIds,variableName:s,rasterFunctionColorRamp:e}),n=t.statistics,a=n&&n.length>0?n[0]:null,o=a?.max??0,l=a?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===i.type&&(o>1e24||l<-1e24)&&(i.dynamicRangeAdjustment=!0,i.customStatistics=null,"none"===i.stretchType&&(i.stretchType="min-max")),this.renderer=i}const a=(0,ce.ol)({...this.renderer.toJSON(),variableName:s}),l=(0,ce.FI)(t,s);this.symbolizer?(this.symbolizer.rendererJSON=a,this.symbolizer.rasterInfo=l):this.symbolizer=new ue.Z({rendererJSON:a,rasterInfo:l});const c=this.symbolizer.bind();if(c.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=(0,ce.Ob)(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,i=t.customStatistics?.length;!t.dynamicRangeAdjustment&&i&&e&&i!==e&&this._configDefaultRenderer("override")}}}else o.Z.getLogger(this).warn("imagery-tile-mixin",c.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}};function i(e){if(!e.raster||!e.serviceRasterInfo)throw new a.Z("imagery-tile","no raster")}return(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"_cachedRasterFunctionJson",void 0),(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"_compatibleFullExtent",void 0),(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"_isConstructedFromFunctionRaster",void 0),(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),(0,n._)([(0,h.Cb)({type:[f.z8],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],t.prototype,"bandIds",void 0),(0,n._)([(0,h.Cb)({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),(0,n._)([(0,h.Cb)({json:{read:!1}})],t.prototype,"fullExtent",null),(0,n._)([(0,h.Cb)({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),(0,I.J)(F.cl)],t.prototype,"interpolation",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"ioConfig",void 0),(0,n._)([(0,h.Cb)({type:[C.Z],json:{write:!0}})],t.prototype,"multidimensionalDefinition",null),(0,n._)([(0,h.Cb)({type:k.Z,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"raster",void 0),(0,n._)([(0,h.Cb)({type:O.Z,json:{name:"renderingRule",write:!0}})],t.prototype,"rasterFunction",null),(0,n._)([(0,h.Cb)({readOnly:!0})],t.prototype,"rasterInfo",null),(0,n._)([(0,h.Cb)()],t.prototype,"serviceRasterInfo",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"sourceJSON",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,type:Q.Z,json:{read:!1}})],t.prototype,"spatialReference",void 0),(0,n._)([(0,h.Cb)({type:M.Z})],t.prototype,"tileInfo",void 0),(0,n._)([(0,h.Cb)(T.HQ)],t.prototype,"url",null),(0,n._)([(0,h.Cb)()],t.prototype,"renderer",null),(0,n._)([(0,h.Cb)({types:b.dr,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:b.FK,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],t.prototype,"internalRenderer",null),(0,n._)([(0,_.r)("internalRenderer")],t.prototype,"readRenderer",null),(0,n._)([(0,h.Cb)({clonable:!1})],t.prototype,"symbolizer",void 0),t=(0,n._)([(0,p.j)("esri.layers.mixins.ImageryTileMixin")],t),t};var pe=i(6061),me=i(29598),ye=i(46405),ge=i(71684),xe=i(56811),be=i(99063),we=i(83040),ve=i(51995),Ie=i(36257),_e=i(99278);function Re(e){return["x","e","east","long","longitude"].includes(e.toLowerCase())}function Se(e){return["y","n","west","lat","latitude"].includes(e.toLowerCase())}function Te(e){const{axes:t}=e.domain,i=Object.keys(t),n=[],s=[];let r=-1,a=-1,o=[];for(let x=0;x<i.length;x++){const e=i[x];Re(e)?r=x:Se(e)&&(a=x);const l=t[e],c=[];if("values"in l){l.values.forEach((e=>c.push("string"==typeof e?new Date(e).getTime():e)));const e=c[1]-c[0];n.push([c[0]-.5*e,c[c.length-1]+.5*e]),s.push(e)}else{const{start:e,stop:t,num:i}=l,r=(t-e)/(i-1);n.push([e-.5*r,t+.5*r]),s.push(r);for(let n=0;n<i;n++)c.push(e+r*n)}o.push({name:e,values:c,extent:[c[0],c[c.length-1]]})}r>-1&&-1===a?a=0===r?1:0:a>-1&&-1===r?r=0===a?1:0:-1===a&&-1===r&&(r=0,a=1),o=o.filter(((e,t)=>!(t===r||t===a)));const{referencing:l}=e.domain,c=l.find((e=>e.coordinates.includes(i[r]))).system.id,u=c?.slice(c.lastIndexOf("/")+1),h=null==u||"CRS84"===u?4326:Number(u),f=new Q.Z({wkid:h}),[d,p]=n[r],[m,y]=n[a],g=new K.Z({xmin:d,xmax:p,ymin:m,ymax:y,spatialReference:f});return{width:Math.round(g.width/s[r]),height:Math.round(g.height/s[a]),extent:g,dimensions:o}}function Ce(e){const t=(0,Ie.G3)();return t?e[t]??Object.values(e)[0]:Object.values(e)[0]}function ke(){return Math.round(255*Math.random())}function Fe(e){let t=Number.MAX_VALUE,i=-Number.MAX_VALUE;for(let n=0;n<e.length;n++){const s=e[n];null!=s&&(s<t&&(t=s),s>i&&(i=s))}return(0,U.JQ)(t,i)}function Oe(e,t,i){const n=e.map(((e,i)=>({name:e,count:t[i]}))).sort(((e,t)=>e.name>t.name?-1:1)),s=(r=1,e=>r*=e.count);var r;const a=[...n.slice(1),{name:"",count:1}].reverse().map(s).reverse();let o=0;for(let l=e.length-1;l>=0;l--)o+=a[n.findIndex((t=>{let{name:i}=t;return i===e[l]}))]*(i%t[l]),i=Math.floor(i/t[l]);return o}function Pe(e){const{width:t,height:i,extent:n,dimensions:s}=Te(e),{ranges:r}=e,a=Object.keys(r).sort(((e,t)=>e<t?-1:1)),o=[];for(let f=0;f<a.length;f++){const e=a[f];s?.length&&o.push({name:e,dimensions:s})}const l=function(e){const t={},{parameters:i}=e;if(!i)return t;for(const[n,s]of Object.entries(i)){const{type:e,description:i,unit:r,categoryEncoding:a,observedProperty:o}=s;if("Parameter"===e&&(t[n]={},i&&(t[n].description=Ce(i)),r&&(t[n].unit=r.label?Ce(r.label):null,t[n].symbol=r.symbol?.value),a)){const e=Object.entries(a).map(((e,t)=>({OID:t,Value:Number(e[1]),ClassName:e[0].slice(e[0].lastIndexOf("/")+1),Count:1})));let i=!1;o?.categories?.length&&(o.categories.forEach((t=>{if(!t.id)return;const n=t.id.slice(t.id.lastIndexOf("/")+1),s=e.find((e=>e.ClassName===n));if(!s)return;const r=t.label?Ce(t.label):null;if(s.Label=r,t.preferredColor){const e=ve.Z.fromHex(t.preferredColor);e&&(i=!0,s.Red=e.r,s.Green=e.g,s.Blue=e.b)}})),i&&e.forEach((e=>{null==e.Red&&(e.Red=ke(),e.Green=ke(),e.Blue=ke())})));const s={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:e.map((e=>({attributes:e})))};i&&s.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),t[n].attributeTable=s}}return t}(e);o.forEach((e=>l[e.name]&&Object.assign(e,l[e.name])));const c=o.length?{variables:o}:void 0,u=[];for(let f=0;f<a.length;f++){const e=a[f],{values:n,dataType:o,axisNames:l,shape:c}=r[e],h=c.length>2?f*c.slice(0,-2).reduce(((e,t)=>e*t)):0,d=l.slice(0,-2),p=c.slice(0,-2),m="float"===o?"f32":Fe(n),y=t*i,g=n.length/y;for(let r=0;r<g;r++){const e=_e.Z.createEmptyBand(m,y),a=new Uint8Array(y).fill(255);let o=!1;const l=r*y;for(let t=0;t<y;t++){const i=n[l+t];null==i?(a[t]=0,o=!0):e[t]=i}if(0===f||s?.length){const n=new _e.Z({width:t,height:i,mask:o?a:null,pixels:[e],pixelType:m});n.updateStatistics(),s?.length?u[Oe(d,p,r)+h]=n:u.push(n)}else{const t=u[r];t.pixels.push(e),o?t.mask&&(t.mask=_e.Z.combineBandMasks([t.mask,a])):t.mask=o?a:null}}}const h=Object.values(l).find((e=>e.attributeTable))?.attributeTable;return{extent:n,pixelBlocks:u,multidimensionalInfo:c,attributeTable:h,bandNames:c?void 0:a}}var Me=i(53737);let De=class extends ie{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!this._pixelBlockTiles){const{rasterInfo:s}=this,[r,a]=s.storageInfo.tileInfo.size,{sliceId:o}=n,{pixelBlocks:l}=this.source,c={pixelBlock:null==o?l[0]:l[o],useBilinear:"thematic"!==s.dataType,tileSize:{width:r,height:a},level:e,row:t,col:i},u=this.rasterJobHandler?this.rasterJobHandler.clipTile(c,n):(0,V.Uu)(c);return Promise.resolve(u)}const s=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(s)}async _open(e){const t=this.source,{pixelBlocks:i,attributeTable:n,statistics:s,histograms:r,name:a,nativeExtent:o,transform:l}=t,c=i[0],{width:u,height:h,pixelType:f}=c,d=t.extent??new K.Z({xmin:-.5,ymin:.5,xmax:u-.5,ymax:h-.5,spatialReference:new Q.Z({wkid:3857})}),p=t.isPseudoSpatialReference??!t.extent,m={x:d.width/u,y:d.height/h},y={...t.keyProperties};n&&(y.DataType="Thematic");const g=new Me.Z({width:u,height:h,pixelType:f,extent:d,nativeExtent:o,attributeTable:n,transform:l,pixelSize:m,spatialReference:d.spatialReference,bandCount:c.pixels.length,keyProperties:y,multidimensionalInfo:t.multidimensionalInfo,statistics:s,isPseudoSpatialReference:p,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(t.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},e),g.multidimensionalInfo||(this.source=null),this.datasetName=a}async _buildInMemoryRaster(e,t,i){const{rasterInfo:n}=this,s=n.storageInfo.maximumPyramidLevel??0,r="thematic"!==n.dataType,o=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s,useBilinear:r},i):Promise.resolve((0,V.Vl)(e,t,s,r)),l=null!=n.statistics,u=null!=n.histograms,h=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve((0,le.Hv)(e)),f=await(0,c.as)([o,h]);if(!f[0].value&&f[1].value)throw new a.Z("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=f[0].value,l||(n.statistics=f[1].value?.statistics),u||(n.histograms=f[1].value?.histograms)}async _buildMDimStats(e,t,i){for(let n=0;n<t.variables.length;n++){const s=t.variables[n];if(s.statistics)continue;const r=s.dimensions.map((e=>new C.Z({variableName:s.name,dimensionName:e.name,values:[e.values?.[0]??e.extent?.[0]],isSlice:!0}))),a=(0,Z.gk)(r,t),o=null==a?null:e[a];if(null==o)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:o},i):(0,le.js)(o);s.statistics=l.statistics,s.histograms||(s.histograms=l.histograms)}}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],De.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],De.prototype,"source",void 0),(0,n._)([(0,h.Cb)()],De.prototype,"url",null),De=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.InMemoryRaster")],De);const Be=De;let Ne=class extends ie{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _open(e){const{extent:t,pixelBlocks:i,multidimensionalInfo:n,attributeTable:s,bandNames:r}=await this._fetchData(e),{statistics:a,histograms:o}=(0,le.js)(i[0]),l=r?.map((e=>({BandName:e}))),c={DataType:s?"Thematic":n?"Scientific":"Generic",BandProperties:l},u=new Be({source:{extent:t,pixelBlocks:i,attributeTable:s?se.Z.fromJSON(s):null,multidimensionalInfo:n,statistics:a,histograms:o,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}async _fetchData(e){const t=this.source??(await this.request(this.url,{signal:e?.signal})).data,i="imagery-tile-layer:open-coverage-json";if("coverage"!==t.type?.toLowerCase()||"grid"!==t.domain?.domainType?.toLowerCase())throw new a.Z(i,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new a.Z(i,"Missing ranges in the grid coverage data");if(!t.domain.referencing?.length)throw new a.Z(i,"Missing domain referencing in the grid coverage data");const n=Object.values(t.ranges);for(let s=0;s<n.length;s++){const{axisNames:e,shape:t,type:r,values:o}=n[s];if(!("ndarray"===r.toLowerCase()&&o?.length&&e?.length&&t?.length))throw new a.Z(i,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!Re(e[e.length-1])||!Se(e[e.length-2]))throw new a.Z(i,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Pe(t)}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],Ne.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)({constructOnly:!0})],Ne.prototype,"source",void 0),Ne=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.CovJSONRaster")],Ne);const Je=Ne;var Ze=i(63780);function Ee(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=[];if(t){const s=Ee(e,i);for(let e=0;e<s.length;e++)Ee(s[e],t).forEach((e=>n.push(e)));return n}const s=e.getElementsByTagNameNS("*",i);if(!s||0===s.length)return[];for(let r=0;r<s.length;r++)n.push(s[r]||s.item(r));return n}function Ae(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=Ee(e,i);return n.length>0?t?Ae(n[0],t):n[0]:null}function ze(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const i=t?Ae(e,t):e;let n;return i?(n=i.textContent||i.nodeValue,n?n.trim():null):null}function Le(e,t){return function(e,t){const i=Ee(e,t),n=[];let s;for(let r=0;r<i.length;r++)s=i[r].textContent||i[r].nodeValue,s&&(s=s.trim(),""!==s&&n.push(s));return n}(e,t).map((e=>Number(e)))}function He(e,t){const i=ze(e,t);return Number(i)}function We(e,t){const i=e?.nodeName?.toLowerCase(),n=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===n}var qe=i(69405);function Ge(e,t){if(!e||!t)return null;const i=[];for(let n=0;n<e.length;n++)i.push(e[n]),i.push(t[n]);return i}function je(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new Q.Z({wkid:t});if(e=String(e).trim(),(0,R.xl)(e))return new Q.Z({wkt2:e});const i=e.toUpperCase();if(i.startsWith("COMPD_CS")){if(!i.includes("VERTCS")||!i.includes("GEOGCS")&&!i.startsWith("PROJCS"))return null;const n=i.indexOf("VERTCS"),s=i.indexOf("PROJCS"),r=s>-1?s:i.indexOf("GEOGCS");if(-1===r)return null;const a=e.slice(r,e.lastIndexOf("]",n)+1).trim(),o=e.slice(n,e.lastIndexOf("]")).trim();t=Ue(a);const l=new Q.Z(t?{wkid:t}:{wkt:a}),c=Ue(o);return c&&(l.vcsWkid=c),l}return i.startsWith("GEOGCS")||i.startsWith("PROJCS")?(t=Ue(e),new Q.Z(0!==t?{wkid:t}:{wkt:e})):null}function Ue(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),n=i[0]?.toLowerCase();if(("epsg"===n||"esri"===n)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function $e(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(We(e,"SRS")){if(!t.spatialReference){const i=ze(e);t.spatialReference=je(i)}}else if(We(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:n}=function(e){const t=Ae(e,"GeodataXform"),i=je(He(t,"SpatialReference/WKID")||ze(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const n=He(t,"PolynomialOrder")??1,s=Le(t,"CoeffX/Double"),r=Le(t,"CoeffY/Double"),a=Le(t,"InverseCoeffX/Double"),o=Le(t,"InverseCoeffY/Double"),l=Ge(s,r),c=Ge(a,o);return{spatialReference:i,transform:l&&c&&l.length&&c.length?new qe.Z({spatialReference:i,polynomialOrder:n,forwardCoefficients:l,inverseCoefficients:c}):null}}(e);t.transform=n,t.spatialReference||(t.spatialReference=i)}else Ee(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=ze(e)));else if(We(e,"PAMRasterBand")){const i=function(e){const t=He(e,"NoDataValue"),i=Ae(e,"Histograms/HistItem"),n=He(i,"HistMin"),s=He(i,"HistMax"),r=He(i,"BucketCount"),a=ze(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,u;Ee(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":u=t}}));const h=He(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=n&&null!=s?{min:n,max:s,size:r||a.length,counts:a}:null,sourceBandIndex:h,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:u}:null}}(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i.length){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)).filter(Ze.pC):null;const n=!!i[0].histogram;t.histograms=n?i.map((e=>e.histogram)).filter(Ze.pC):null}return t}let Ve=class extends ie{fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _open(e){const t=await this._fetchData(e);let{spatialReference:i,statistics:n,histograms:s,transform:r}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new Q.Z({wkid:3857})),s?.length&&null==n&&(n=(0,le.Oh)(s));const{width:o,height:l}=t;let c=new K.Z({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:i});const u=r?r.forwardTransform(c):c;let h=!0;if(r){const e=r.forwardCoefficients;h=e&&0===e[1]&&0===e[2],h&&(r=null,c=u)}const f=new Be({source:{extent:u,nativeExtent:c,transform:r,pixelBlocks:[t],statistics:n,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(f.ioConfig.skipMapInfo=!0),await f.open(),f.source=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=(0,$.y)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new a.Z("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const n=i.toLowerCase(),s="gif"===n||"bmp"===n||!(0,d.Z)("ios"),r=await this.decodePixelBlock(t,{format:n,useCanvas:s,hasNoZlibMask:!0});if(null==r)throw new a.Z("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(e){const t=e?.signal,{skipExtensions:i=[],skipMapInfo:n}=this.ioConfig,s=n||i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,a="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,o=a&&i.includes(a)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+a,{responseType:"text",signal:t}),l=await(0,c.as)([s,o]);if(t?.aborted)throw(0,c.zE)();const u=$e(l[0].value?.data);if(!u.transform){const e=l[1].value?l[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;u.transform=6===e?.length?new qe.Z({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return u}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],Ve.prototype,"datasetFormat",void 0),Ve=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.ImageAuxRaster")],Ve);const Ye=Ve;var Xe=i(92026),Ke=i(35995),Qe=i(34810),et=i(3089),tt=i(38045);let it=class extends ie{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{storageInfo:s,extent:r}=this.rasterInfo,{transposeInfo:a}=s,o=null!=a&&!!n.transposedVariableName;if(this._slices&&!o&&null==n.sliceId)return null;const l=o?0:s.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${l}/${t}/${i}`,u=this._slices?o?{variable:n.transposedVariableName}:{sliceId:n.sliceId||0}:null,{data:h}=await this.request(c,{query:u,responseType:"array-buffer",signal:n.signal});if(!h)return null;const f=o?a.tileSize:s.tileInfo.size,d=await this.decodePixelBlock(h,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(null==d)return null;const p=s.blockBoundary[e];if("jpg"!==s.compression||i>p.minCol&&i<p.maxCol&&t>p.minRow&&t<p.maxRow)return d;const{origin:m,blockWidth:y,blockHeight:g}=s,{x:x,y:b}=this.getPyramidPixelSize(e),w=Math.round((r.xmin-m.x)/x)%y,v=Math.round((r.xmax-m.x)/x)%y||y,I=Math.round((m.y-r.ymax)/b)%g,_=Math.round((m.y-r.ymin)/b)%g||g,R=i===p.minCol?w:0,S=t===p.minRow?I:0,T=i===p.maxCol?v:y,C=t===p.maxRow?_:g;return(0,V.pW)(d,{x:R,y:S},{width:T-R,height:C-S}),d}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),n=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),s=await Promise.all([i,n]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),s[1]?.[0]?.counts?.length||(s[1]=null),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===i)return null;let n=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let r=s-n+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,t))break}catch{}if(r--,n++,i=this.identifyPixelLocation(a,n,t.datumTransformation),null===i)return null}return-1===r||null==i?null:n}async _open(e){const t=e?.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new a.Z("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new a.Z("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();this.tileType=n.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(n.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name?.slice(n.name.indexOf("/")+1)??"";const s=await this._fetchRasterInfo({signal:t});if(null==s)throw new a.Z("image-server-raster:open","cannot initialize image service");(0,tt.n$)(s,n);const r="Map"===this.tileType?function(e,t){if(!e)return null;const{minScale:i,maxScale:n,minLOD:s,maxLOD:r}=t;if(null!=s&&null!=r)return M.Z.fromJSON({...e,lods:e.lods.filter((e=>{let{level:t}=e;return null!=t&&t>=s&&t<=r}))});if(0!==i&&0!==n){const t=e=>Math.round(1e4*e)/1e4,s=i?t(i):1/0,r=n?t(n):-1/0;return M.Z.fromJSON({...e,lods:e.lods.filter((e=>{const i=t(e.scale);return i<=s&&i>=r}))})}return M.Z.fromJSON(e)}(n.tileInfo,n):M.Z.fromJSON(n.tileInfo);(0,Xe.O3)(r);const[o,l]=this._computeMinMaxLOD(s,r),{extent:c,pixelSize:u}=s,h=.5/s.width*u.x,f=Math.max(u.x,u.y),{lods:d}=r;("Map"!==this.tileType&&0!==n.maxScale||Math.abs(u.x-u.y)>h||!d.some((e=>Math.abs(e.resolution-f)<h)))&&(u.x=u.y=o.resolution,s.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),s.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const p=o.level-l.level,[m,y]=r.size,g=[],x=[];d.forEach(((e,t)=>{e.level>=l.level&&e.level<=o.level&&g.push({x:e.resolution,y:e.resolution}),t<d.length-1&&x.push(Math.round(10*e.resolution/d[t+1].resolution)/10)})),g.sort(((e,t)=>e.x-t.x));const b=this.computeBlockBoundary(c,m,y,r.origin,g,p),w=g.length>1?g.slice(1):null;let v;n.transposeInfo&&(v={tileSize:[n.transposeInfo.rows,n.transposeInfo.cols],packetSize:s.keyProperties?._yxs.PacketSize??0});const I=x.length<=1||x.length>=3&&x.slice(0,-1).every((e=>e===x[0]))?x[0]??2:Math.round(10/(l.resolution/o.resolution)**(-1/p))/10;if(s.storageInfo=new J.Z({blockWidth:r.size[0],blockHeight:r.size[1],pyramidBlockWidth:r.size[0],pyramidBlockHeight:r.size[1],pyramidResolutions:w,pyramidScalingFactor:I,compression:r.format,origin:r.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:r,transposeInfo:v,blockBoundary:b}),function(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new et.Z,e.extent=e.transform.forwardTransform(t))}(s),this._set("rasterInfo",s),n.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:s.storageInfo.tileInfo,parsedUrl:(0,Ke.mN)(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Qe.y({layer:e})}}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),n=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),s=Q.Z.fromJSON(t.spatialReference||e.spatialReference),r=new A.Z({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s});return new Me.Z({width:i,height:n,bandCount:3,extent:K.Z.fromJSON(e),spatialReference:s,pixelSize:r,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,n=(0,tt.gh)(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),s=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data?.slices)).catch((()=>null)):null,r=await Promise.all([n,s]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,n=.5/e.width*i.x,{lods:s}=t,r=t.lodAt(Math.max.apply(null,s.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,s.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=s[0].level,[r,a];if("Raster"===o)return[s.find((e=>e.resolution===i.x))??r,a];const{minScale:l,maxScale:c}=this.sourceJSON;let u=r;c>0&&(u=s.find((e=>Math.abs(e.scale-c)<n)),u||(u=s.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??r));let h=a;return l>0&&(h=s.find((e=>Math.abs(e.scale-l)<n))??a,this._levelOffset=h.level-a.level),[u,h]}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],it.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],it.prototype,"tileType",void 0),it=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.ImageServerRaster")],it);const nt=it;var st=i(60263);const rt=new Map;rt.set("Int8","s8"),rt.set("UInt8","u8"),rt.set("Int16","s16"),rt.set("UInt16","u16"),rt.set("Int32","s32"),rt.set("UInt32","u32"),rt.set("Float32","f32"),rt.set("Float64","f32"),rt.set("Double64","f32");const at=new Map;at.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),at.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),at.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),at.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ot=class extends ie{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{blockWidth:s,blockHeight:r,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[e];if(!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(e,t,i);if(!u||0===u.length)return null;if(0===u[0].from&&0===u[0].to){const e=new Uint8Array(s*r);return new _e.Z({width:s,height:r,pixels:void 0,mask:e,validPixelCount:0})}const{bandIds:d}=this.ioConfig,p=this._getBandSegmentCount(),m=[];let y=0;for(y=0;y<p;y++)d&&!d.includes(y)||m.push(this.request(this._files.data,{range:{from:u[y].from,to:u[y].to},responseType:"array-buffer",signal:n.signal}));const g=await Promise.all(m),x=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),b=new Uint8Array(x),w=[];let v=0;for(y=0;y<p;y++)w.push(v),b.set(new Uint8Array(g[y].data),v),v+=g[y].data.byteLength;const I=at.get(this.rasterInfo.storageInfo.compression).decoderFormat,_=await this.decodePixelBlock(b.buffer,{width:s,height:r,format:I,planes:d?.length||l,offsets:w,pixelType:c});if(null==_)return null;let{noDataValue:R}=this.rasterInfo;if(null!=R&&"lerc"!==I&&!_.mask&&(R=R[0],null!=R)){const e=_.width*_.height,t=new Uint8Array(e);if(Math.abs(R)>1e24)for(y=0;y<e;y++)Math.abs((_.pixels[0][y]-R)/R)>1e-6&&(t[y]=1);else for(y=0;y<e;y++)_.pixels[0][y]!==R&&(t[y]=1);_.mask=t}let S=0,T=0;if(h!==s||f!==r){let e=_.mask;if(e)for(y=0;y<r;y++)if(T=y*s,y<f)for(S=h;S<s;S++)e[T+S]=0;else for(S=0;S<s;S++)e[T+S]=0;else for(e=new Uint8Array(s*r),_.mask=e,y=0;y<f;y++)for(T=y*s,S=0;S<h;S++)e[T+S]=1}return _}async _open(e){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:n,files:s}=this._parseHeader(i.data),{skipMapInfo:r,skipExtensions:a=[]}=this.ioConfig;if(!a.includes("aux.xml")&&!r){const t=await this._fetchAuxiliaryData(e);null!=t&&(n.statistics=t.statistics??n.statistics,n.histograms=t.histograms,t.histograms&&null==n.statistics&&(n.statistics=(0,le.Oh)(t.histograms)))}r&&this.updateImageSpaceRasterInfo(n),this._set("rasterInfo",n),this._files=s;const o=await this.request(s.index,{responseType:"array-buffer",signal:t});this._storageIndex=function(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,i,n,s,r,a;if(st.f){for(i=new Uint8Array(e),s=new ArrayBuffer(e.byteLength),n=new Uint8Array(s),r=0;r<e.byteLength/4;r++)for(a=0;a<4;a++)n[4*r+a]=i[4*r+3-a];t=new Uint32Array(s)}else t=new Uint32Array(e);return t}(o.data);const{blockWidth:l,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,d=[],p=this._getBandSegmentCount();let m=0,y=-1;for(;m<this._storageIndex.length;){y++;const e=Math.ceil(h/l/u**y)-1,t=Math.ceil(f/c/u**y)-1;m+=(e+1)*(t+1)*p*4,d.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}_getBandSegmentCount(){return at.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:n,blockHeight:s,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,h,f=0,d=0;for(h=0;h<e;h++)d=r**h,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=c*u;d=r**e,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=t*c+i,f*=4*l;const p=this._storageIndex.subarray(f,f+4*l);let m=0,y=0;const g=[];for(let x=0;x<l;x++)m=p[4*x]*2**32+p[4*x+1],y=m+p[4*x+2]*2**32+p[4*x+3],g.push({from:m,to:y});return{ranges:g,actualTileWidth:i<c-1?n:Math.ceil(a/d)-n*(c-1),actualTileHeight:t<u-1?s:Math.ceil(o/d)-s*(u-1)}}_parseHeader(e){const t=Ae(e,"MRF_META/Raster");if(!t)throw new a.Z("mrf:open","not a valid MRF format");const i=Ae(t,"Size"),n=parseInt(i.getAttribute("x"),10),s=parseInt(i.getAttribute("y"),10),r=parseInt(i.getAttribute("c"),10),o=(ze(t,"Compression")||"none").toLowerCase();if(!at.has(o))throw new a.Z("mrf:open","currently does not support compression "+o);const l=ze(t,"DataType")||"UInt8",c=rt.get(l);if(null==c)throw new a.Z("mrf:open","currently does not support pixel type "+l);const u=Ae(t,"PageSize"),h=parseInt(u.getAttribute("x"),10),f=parseInt(u.getAttribute("y"),10),d=Ae(t,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((e=>parseFloat(e))))),Ae(e,"MRF_META/CachedSource"))throw new a.Z("mrf:open","currently does not support MRF referencing other data files");const y=Ae(e,"MRF_META/GeoTags"),g=Ae(y,"BoundingBox");let x,b=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),i=parseFloat(g.getAttribute("maxx")),n=parseFloat(g.getAttribute("maxy")),s=ze(y,"Projection")||"";let r=Q.Z.WGS84;if("LOCAL_CS[]"!==s)if(s.toLowerCase().startsWith("epsg:")){const e=Number(s.slice(5));isNaN(e)||0===e||(r=new Q.Z({wkid:e}))}else r=je(s)??Q.Z.WGS84;else b=!0,r=new Q.Z({wkid:3857});x=new K.Z(e,t,i,n),x.spatialReference=r}else b=!0,x=new K.Z({xmin:-.5,ymin:.5-s,xmax:n-.5,ymax:.5,spatialReference:new Q.Z({wkid:3857})});const w=Ae(e,"MRF_META/Rsets"),v=parseInt(w?.getAttribute("scale")||"2",10),I=x.spatialReference,_=new J.Z({origin:new A.Z({x:x.xmin,y:x.ymax,spatialReference:I}),blockWidth:h,blockHeight:f,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:o,pyramidScalingFactor:v}),R=new A.Z({x:x.width/n,y:x.height/s,spatialReference:I}),S=new Me.Z({width:n,height:s,extent:x,isPseudoSpatialReference:b,spatialReference:I,bandCount:r,pixelType:c,pixelSize:R,noDataValue:p,storageInfo:_}),T=ze(e,"datafile"),C=ze(e,"IndexFile");return{rasterInfo:S,files:{mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",at.get(o).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return $e(t)}catch{return null}}};(0,n._)([(0,h.Cb)()],ot.prototype,"_files",void 0),(0,n._)([(0,h.Cb)()],ot.prototype,"_storageIndex",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],ot.prototype,"datasetFormat",void 0),ot=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.MRFRaster")],ot);const lt=ot;var ct=i(17061);function ut(e){const t=e.fields,i=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",s=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),r=s.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[n]=o++,l=1;l<r.length;l++)t[r[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:s,features:a}}class ht{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const n=t.getUint32(4,!0),s=t.getUint16(8,!0),r=t.getUint16(10,!0),a={version:i,recordCount:n,headerByteCount:s,recordByteCount:r};let o=32;const l=[],c=[];let u;if(3===i){for(;13!==t.getUint8(o);)u=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:(0,ct.f)(new Uint8Array(e,o,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<n&&e.byteLength-o>r;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push((0,ct.f)(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const n=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(n.slice(0,4),10),parseInt(n.slice(4,6),10)-1,parseInt(n.slice(6,8),10)))}o+=t.length})),c.push(i)):o+=r}}return{header:a,fields:l,records:c,recordSet:ut({fields:l,records:c})}}}var ft=i(58424),dt=i(92217);const pt=(e,t)=>e.get(t)?.values,mt=(e,t)=>e.get(t)?.values?.[0];let yt=class extends ie{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const s=await this._fetchRawTiffTile(e,t,i,!1,n);if(null!=s&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(e,t,i,!0,n);null!=r&&r.pixels[0]instanceof Uint8Array&&(s.mask=r.pixels[0])}return s}async _open(e){const t=e?e.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new a.Z("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:n,firstIFDPos:s,isBigTiff:r}=(0,ft.cK)(i),l=[];await this._readIFDs(l,i,n,s,0,r?8:4,t);const{imageInfo:c,rasterInfo:u}=function(e){const t=(0,ft.FI)(e),{width:i,height:n,tileWidth:s,tileHeight:r,planes:a,pixelType:o,compression:l,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:h,pyramidBlockHeight:f,pyramidResolutions:d,tileBoundary:p,affine:m,metadata:y}=t,g=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let x=je(g),b=!!t.isPseudoGeographic;null==x&&(b=!0,x=new Q.Z({wkid:3857}));const w=new K.Z({...t.extent,spatialReference:x}),v=new A.Z(w?{x:w.xmin,y:w.ymax,spatialReference:x}:{x:0,y:0}),I=new J.Z({blockWidth:s,blockHeight:r,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:l,origin:v,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:d,blockBoundary:p}),_=new A.Z({x:(w.xmax-w.xmin)/i,y:(w.ymax-w.ymin)/n,spatialReference:x}),R=y?{BandProperties:y.bandProperties,DataType:y.dataType}:{};let S=null;const T=mt(e[0],"PHOTOMETRICINTERPRETATION"),C=pt(e[0],"COLORMAP");if(T<=3&&C?.length>3&&C.length%3==0){S=[];const e=C.length/3;for(let t=0;t<e;t++)S.push([t,C[t]>>>8,C[t+e]>>>8,C[t+2*e]>>>8])}const k=new Me.Z({width:i,height:n,bandCount:a,pixelType:o,pixelSize:_,storageInfo:I,spatialReference:x,isPseudoSpatialReference:b,keyProperties:R,extent:w,colormap:S,statistics:y?y.statistics:null});if(m?.length&&(k.nativeExtent=new K.Z({xmin:-.5,ymin:.5-n,xmax:i-.5,ymax:.5,spatialReference:x}),k.transform=new qe.Z({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),k.extent=k.transform.forwardTransform(k.nativeExtent),k.pixelSize=new A.Z({x:(w.xmax-w.xmin)/i,y:(w.ymax-w.ymin)/n,spatialReference:x}),I.origin.x=-.5,I.origin.y=.5),d){const{x:e,y:t}=k.pixelSize;d.forEach((i=>{i.x*=e,i.y*=t}))}return{imageInfo:t,rasterInfo:k}}(l),h=(0,ft.ee)(l),f=(0,ft.I7)(l);if(this._headerInfo={littleEndian:n,isBigTiff:r,ifds:l,pyramidIFDs:h,maskIFDs:f,...c},this._set("rasterInfo",u),!c.isSupported)throw new a.Z("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new a.Z("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");u.isPseudoSpatialReference&&o.Z.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const d=l[0].get("PREDICTOR")?.values?.[0],p=l[0].get("SAMPLEFORMAT")?.values?.[0];if(3===p&&2===d)throw new a.Z("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:m,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!m){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&function(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=(0,le.Oh)(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new A.Z({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}(t,u)}y.includes("vat.dbf")||1!==u.bandCount||"u8"!==u.pixelType||m||(u.attributeTable=await this._fetchAuxiliaryTable(e),null!=u.attributeTable&&(u.keyProperties.DataType="thematic")),m&&this.updateImageSpaceRasterInfo(u),this.updateTileInfo()}async _readIFDs(e,t,i,n,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,a=arguments.length>6?arguments[6]:void 0;if(!n)return null;(n>=t.byteLength||n<0)&&(t=(await this.request(this.url,{range:{from:n+s,to:n+s+this._bufferSize},responseType:"array-buffer",signal:a})).data,s=n+s,n=0);const o=await this._readIFD(t,i,n,s,dt.Z.tiffTags,r,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-s,s,r,a)}async _readIFD(e,t,i,n){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:dt.Z.tiffTags,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,a=arguments.length>6?arguments[6]:void 0;if(!e)return null;const o=(0,ft.vr)(e,t,i,n,s,r);if(o.success){const i=[];if(o.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const s=i.map((e=>e.offlineOffsetSize)).filter(Ze.pC),r=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-r<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:r,to:r+this._bufferSize},responseType:"array-buffer",signal:a});e=s,n=r,i.forEach((i=>(0,ft.Dq)(e,t,i,n)))}}if(o.ifd?.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),s=i?.values;if(s&&s.length>4){const r=s[0]+"."+s[1]+"."+s[2],o=await this._readIFD(e,t,i.valueOffset+6-n,n,dt.Z.geoKeys,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[r]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:n,to:n+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,n,dt.Z.tiffTags,4,a)}}async _fetchRawTiffTile(e,t,i,n){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};const r=this._getTileLocation(e,t,i,n);if(!r)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=r,u=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),h=await Promise.all(u),f=h.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===h.length?h[0].data:new ArrayBuffer(f),p=[0],m=[0];if(h.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<h.length;t++){const n=h[t].data;e.set(new Uint8Array(n),i),p[t]=i,i+=n.byteLength,m[t]=n.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:p,sizes:m},width:y,height:g,planes:null,pixelType:null});if(null==x)return null;let b,w,v;if(o!==y||l!==g){let e=x.mask;if(e)for(b=0;b<g;b++)if(v=b*y,b<l)for(w=o;w<y;w++)e[v+w]=0;else for(w=0;w<y;w++)e[v+w]=0;else for(e=new Uint8Array(y*g),x.mask=e,b=0;b<l;b++)for(v=b*y,w=0;w<o;w++)e[v+w]=1}return x}_getTileLocation(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,a=0===e?0:e-(s-1),{_headerInfo:o}=this;if(!o)return null;const l=n?o.maskIFDs[a]:0===a?o?.ifds[0]:o?.pyramidIFDs[a-1];if(!l)return null;const c=(0,ft.If)(l,o),u=pt(l,"TILEOFFSETS");if(void 0===u)return null;const h=pt(l,"TILEBYTECOUNTS"),{minRow:f,minCol:d,maxRow:p,maxCol:m}=r[a];if(t>p||i>m||t<f||i<d)return null;const y=mt(l,"IMAGEWIDTH"),g=mt(l,"IMAGELENGTH"),x=mt(l,"TILEWIDTH"),b=mt(l,"TILELENGTH"),w=[];if(c){const{bandCount:e}=this.rasterInfo;for(let n=0;n<e;n++){const e=n*(p+1)*(m+1)+t*(m+1)+i;w[n]={from:u[e],to:u[e]+h[e]-1}}}else{const e=t*(m+1)+i;w.push({from:u[e],to:u[e]+h[e]-1})}for(let v=0;v<w.length;v++)if(null==w[v].from||!w[v].to||w[v].to<0)return null;return{ranges:w,ifd:l,actualTileWidth:i===m&&y%x||x,actualTileHeight:t===p&&g%b||b}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return $e(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),i=ht.parse(t);return i?.recordSet?se.Z.fromJSON(i.recordSet):null}catch{return null}}};(0,n._)([(0,h.Cb)()],yt.prototype,"_files",void 0),(0,n._)([(0,h.Cb)()],yt.prototype,"_headerInfo",void 0),(0,n._)([(0,h.Cb)()],yt.prototype,"_bufferSize",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],yt.prototype,"datasetFormat",void 0),yt=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.TIFFRaster")],yt);const gt=yt,xt=new Map;xt.set("MRF",{desc:"Meta Raster Format",constructor:lt}),xt.set("TIFF",{desc:"GeoTIFF",constructor:gt}),xt.set("RasterTileServer",{desc:"Raster Tile Server",constructor:nt}),xt.set("JPG",{desc:"JPG Raster Format",constructor:Ye}),xt.set("PNG",{desc:"PNG Raster Format",constructor:Ye}),xt.set("GIF",{desc:"GIF Raster Format",constructor:Ye}),xt.set("BMP",{desc:"BMP Raster Format",constructor:Ye}),xt.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Je}),xt.set("MEMORY",{desc:"In Memory Raster Format",constructor:Be});class bt{static get supportedFormats(){const e=new Set;return xt.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,source:n,sourceJSON:s}=e;let r=e.datasetFormat??i?.datasetFormat;null==r&&(t.includes(".")?r=t.slice(t.lastIndexOf(".")+1).toUpperCase():"coverage"===n?.type?.toLowerCase()?r="CovJSON":n?.extent&&n.pixelblocks&&(r="MEMORY")),"OVR"===r||"TIF"===r?r="TIFF":"JPG"===r||"JPEG"===r||"JFIF"===r?r="JPG":"COVJSON"===r&&(r="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const o={url:t,source:n,sourceJSON:s,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(o).forEach((e=>{null==o[e]&&delete o[e]})),r){if(!this.supportedFormats.has(r))throw new a.Z("rasterfactory:open","not a supported format "+r);if("CRF"===r)throw new a.Z("rasterfactory:open",`cannot open raster: ${t}`);const i=new(0,xt.get(r).constructor)(o);return await i.open({signal:e.signal}),i}const l=Array.from(xt.keys()).filter((e=>"CovJSON"!==e&&"Memory"!==e));let c=0;const u=()=>{if(r=l[c++],!r)return null;if("CRF"===r)return null;const t=new(0,xt.get(r).constructor)(o);return t.open({signal:e.signal}).then((()=>t)).catch((()=>u()))};return u()}static register(e,t,i){xt.has(e.toUpperCase())||xt.set(e.toUpperCase(),{desc:t,constructor:i})}}var wt=i(81085),vt=i(84933);let It=class extends((0,g.h7)((0,xe.M)((0,pe.q)((0,me.I)((0,ye.Z)((0,x.N)(de((0,be.n)((0,y.Y)((0,ge.Q)((0,l.R)((0,r.J)(m.Z))))))))))))){constructor(){super(...arguments),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=(0,c.Ds)((async(e,t,n)=>{const{save:s,saveAs:r}=await i.e(3275).then(i.bind(i,63275));switch(e){case vt.x.SAVE:return s(this,t);case vt.x.SAVE_AS:return r(this,n,t)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(c.r9).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new we.Z({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new we.Z({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],t=this.raster?.rasterInfo??this.serviceRasterInfo,i=t?.attributeTable,n=null!=i?i.fields:null;if(n){const t=n.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e.push(...t)}const s=t?.dataType,r=t?.multidimensionalInfo;if(("vector-magdir"===s||"vector-uv"===s)&&null!=r){const t=r.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new we.Z({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new we.Z({name:"Raster.Direction",alias:"Direction (\xb0)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,i=e?.visibleFieldNames??new Set(t.map((e=>{let{name:t}=e;return t})).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase()))),n=(0,wt.eZ)({fields:t,title:this.title},{...e,visibleFieldNames:i}),{rasterInfo:s}=this.raster;return n?.fieldInfos&&s?.pixelType.startsWith("f")&&n.fieldInfos.forEach((e=>{let{format:t,fieldName:i}=e;t&&i&&/^raster\.(item|service)pixelvalue/i.test(i)&&(t.places=2)})),n}async generateRasterInfo(e,t){if(e=(0,f.TJ)(O.Z,e),await this.load(),!e||"none"===e.functionName?.toLowerCase())return this.serviceRasterInfo;try{const{rasterInfo:i}=await this._openFunctionRaster(e,t);return i}catch(z){if(z instanceof a.Z)throw z;throw new a.Z("imagery-tile-layer","the given raster function is not supported")}}async save(e){return this._debouncedSaveOperations(vt.x.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(vt.x.SAVE_AS,t,e)}write(e,t){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new a.Z("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)await this._openFromRaster(this.raster,e),t="Function"===this.raster.datasetFormat,!t&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:t,rasterFunction:i,source:n}=this;if(!t&&!n)throw new a.Z("imagery-tile-layer:open","missing url or source parameter");n?await this._openFromSource(n,e):i?await this._openFromUrlWithRasterFunction(t,i,e):await this._openFromUrl(t,e)}const i=this.raster.rasterInfo;if(!i)throw new a.Z("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles((0,u.YP)((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}async _openFromRaster(e,t){e.rasterInfo||await e.open({signal:t}),this._primaryRasters="Function"===e.datasetFormat?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(e,t,i){const n=[e];t&&(0,oe.G8)(t.toJSON(),n);const s=await Promise.all(n.map((e=>bt.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:i})))),r=s.findIndex((e=>null==e));if(r>-1)throw new a.Z("imagery-tile-layer:open",`cannot open raster: ${n[r]}`);return this._primaryRasters=s,this._initializeWithFunctionRaster(t)}async _openFromUrl(e,t){const i=await bt.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==i)throw new a.Z("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[i],this.raster=i}async _openFromSource(e,t){const i="the tiled imagery data source is not supported",n="coverage"===e.type?.toLowerCase()?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!n)throw new a.Z("imagery-tile-layer:open",i);"MEMORY"===n&&(e={...e,pixelBlock:void 0,pixelBlocks:[e.pixelBlock]});const s=await bt.open({url:"",source:e,datasetFormat:n,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==s)throw new a.Z("imagery-tile-layer:open",i);this._primaryRasters=[s],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=s}async _openFunctionRaster(e,t){const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>i[e.url]=e));const n=(0,oe.Ue)(e.functionDefinition?.toJSON()??e.toJSON(),i),s=new ae({rasterFunction:n});return await s.open(t),s}async _initializeWithFunctionRaster(e,t){try{this.raster=await this._openFunctionRaster(e,t)}catch(z){z instanceof a.Z&&o.Z.getLogger(this).error("imagery-tile-layer:open",z.message),o.Z.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};(0,n._)([(0,h.Cb)({clonable:!1})],It.prototype,"_primaryRasters",void 0),(0,n._)([(0,h.Cb)(T.rn)],It.prototype,"legendEnabled",void 0),(0,n._)([(0,h.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],It.prototype,"isReference",void 0),(0,n._)([(0,h.Cb)({type:["show","hide"]})],It.prototype,"listMode",void 0),(0,n._)([(0,h.Cb)({json:{read:!0,write:!0}})],It.prototype,"blendMode",void 0),(0,n._)([(0,h.Cb)()],It.prototype,"sourceJSON",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],It.prototype,"version",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,json:{read:!1}})],It.prototype,"type",void 0),(0,n._)([(0,h.Cb)({type:["ArcGISTiledImageServiceLayer"]})],It.prototype,"operationalLayerType",void 0),(0,n._)([(0,h.Cb)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],It.prototype,"popupEnabled",void 0),(0,n._)([(0,h.Cb)({type:s.Z,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],It.prototype,"popupTemplate",void 0),(0,n._)([(0,h.Cb)({readOnly:!0})],It.prototype,"defaultPopupTemplate",null),(0,n._)([(0,h.Cb)({readOnly:!0,type:[we.Z]})],It.prototype,"fields",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,type:[we.Z]})],It.prototype,"rasterFields",null),(0,n._)([(0,h.Cb)({constructOnly:!0})],It.prototype,"source",void 0),It=(0,n._)([(0,p.j)("esri.layers.ImageryTileLayer")],It);const _t=It},34810:(e,t,i)=>{i.d(t,{y:()=>R});var n,s=i(27366),r=i(76200),a=i(7138),o=i(70116),l=i(10064),c=i(42537),u=(i(93169),i(16054)),h=i(10199),f=i(66978),d=i(94172),p=i(99346),m=i(35995),y=i(49861),g=(i(32718),i(84936),i(69912)),x=i(87960),b=i(84652),w=i(18722);class v{constructor(e){!function(e){if(!e?.location)throw new l.Z("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new l.Z("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new l.Z("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new l.Z("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new l.Z("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}(e);const{location:t,data:i}=e;this.location=Object.freeze((0,b.d9)(t));const n=this.location.width,s=this.location.height;let r=!0,a=!0;const o=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e<=w.c8?t?new Array(e).fill(0):new Array(e):new Uint32Array(e)}(Math.ceil(n*s/32));let c=0;for(let l=0;l<i.length;l++){const e=l%32;i[l]?(a=!1,o[c]|=1<<e):r=!1,31===e&&++c}a?(this._availability="unavailable",this.byteSize=40):r?(this._availability="available",this.byteSize=40):(this._availability=o,this.byteSize=40+(0,w.Xw)(o))}getAvailability(e,t){if("unavailable"===this._availability||"available"===this._availability)return this._availability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),n=i%32,s=i>>5,r=this._availability;return s<0||s>r.length?"unknown":r[s]&1<<n?"available":"unavailable"}static fromDefinition(e,t){const i=e.service.request||r.Z,{row:n,col:s,width:a,height:o}=e,c={query:{f:"json"}};return t=t?{...c,...t}:c,i(function(e){let t;if(e.service.tileServers?.length){const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}else t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;const i=e.service.query;return i&&(t=`${t}?${i}`),t}(e),t).then((e=>e.data)).catch((e=>{if(422===e?.details?.httpStatus)return{location:{top:n,left:s,width:a,height:o},valid:!0,data:new Array(a*o).fill(0)};throw e})).then((e=>{if(e.location&&(e.location.top!==n||e.location.left!==s||e.location.width!==a||e.location.height!==o))throw new l.Z("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:n,left:s,width:a,height:o}});return v.fromJSON(e)}))}static fromJSON(e){return Object.freeze(new v(e))}}function I(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}function _(e,t,i){return new l.Z("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i})}let R=n=class extends a.Z{constructor(e){super(e),this._pendingTilemapRequests={},this.request=r.Z,this.size=32,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new u.z(2*o.Y.MEGABYTES),this.addHandles((0,d.YP)((()=>{const{layer:e}=this;return[e?.parsedUrl,e?.tileServers,e?.apiKey,e?.customParameters]}),(()=>this._initializeTilemapDefinition()),d.nn))}get effectiveMinLOD(){return this.minLOD??this.layer.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.layer.tileInfo.lods[this.layer.tileInfo.lods.length-1].level}getAvailability(e,t,i){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return"unavailable";const n=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return n?n.getAvailability(t,i):"unknown"}fetchAvailability(e,t,i,n){return!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD?Promise.reject(_(e,t,i)):this._fetchTilemap(e,t,i,n).catch((e=>e)).then((n=>{if(n instanceof v){const s=n.getAvailability(t,i);if("unavailable"===s)throw _(e,t,i);return s}if((0,f.D_)(n))throw n;return"unknown"}))}fetchAvailabilityUpsample(e,t,i,n,s){n.level=e,n.row=t,n.col=i;const r=this.layer.tileInfo;r.updateTileInfo(n);const a=this.fetchAvailability(e,t,i,s).catch((e=>{if((0,f.D_)(e))throw e;if(r.upsampleTile(n))return this.fetchAvailabilityUpsample(n.level,n.row,n.col,n,s);throw e}));return this._fetchAvailabilityUpsamplePrefetch(n.id,e,t,i,s,a),a}async _fetchAvailabilityUpsamplePrefetch(e,t,i,s,r,a){if(!this._prefetchingEnabled||null==e)return;const o=`prefetch-${e}`;if(this.hasHandles(o))return;const l=new AbortController;a.then((()=>l.abort()),(()=>l.abort()));let u=!1;const h=(0,c.kB)((()=>{u||(u=!0,l.abort())}));if(this.addHandles(h,o),await(0,p.MU)(10,l.signal).catch((()=>{})),u||(u=!0,this.removeHandles(o)),(0,f.Hc)(l))return;const d=new x.f(e,t,i,s),m={...r,signal:l.signal},y=this.layer.tileInfo;for(let c=0;n._prefetches.length<n._maxPrefetch&&y.upsampleTile(d);++c){const e=this.fetchAvailability(d.level,d.row,d.col,m);n._prefetches.push(e);const t=()=>{n._prefetches.removeUnordered(e)};e.then(t,t)}}_fetchTilemap(e,t,i,n){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return Promise.reject(new l.Z("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const s=this._tmpTilemapDefinition,r=this._tilemapFromCache(e,t,i,s);if(r)return Promise.resolve(r);const a=n?.signal;return n={...n,signal:null},new Promise(((e,t)=>{(0,f.fu)(a,(()=>t((0,f.zE)())));const i=I(s);let r=this._pendingTilemapRequests[i];if(!r){r=v.fromDefinition(s,n).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>{delete this._pendingTilemapRequests[i]};this._pendingTilemapRequests[i]=r,r.then(e,e)}r.then(e,t)}))}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:t,customParameters:i}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:(0,m.B7)({...e.query,...i,token:t??e.query?.token}),tileServers:this.layer.tileServers,request:this.request},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,n){n.level=e,n.row=t-t%this.size,n.col=i-i%this.size;const s=I(n);return this._tilemapCache.get(s)}get test(){}};R._maxPrefetch=4,R._prefetches=new h.Z({initialSize:n._maxPrefetch}),(0,s._)([(0,y.Cb)({constructOnly:!0})],R.prototype,"layer",void 0),(0,s._)([(0,y.Cb)({constructOnly:!0})],R.prototype,"minLOD",void 0),(0,s._)([(0,y.Cb)({constructOnly:!0})],R.prototype,"maxLOD",void 0),(0,s._)([(0,y.Cb)({constructOnly:!0})],R.prototype,"request",void 0),(0,s._)([(0,y.Cb)({constructOnly:!0})],R.prototype,"size",void 0),R=n=(0,s._)([(0,g.j)("esri.layers.support.TilemapCache")],R)}}]);
//# sourceMappingURL=7031.96d4886c.chunk.js.map